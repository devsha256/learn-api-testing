{
	"info": {
		"_postman_id": "701cd223-d88f-4615-887d-d6ec26bce755",
		"name": "Migration Boomi to Mulesoft (XML)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41089880"
	},
	"item": [
		{
			"name": "[SETUP] Clear Previous Reports",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const previousCount = parseInt(pm.collectionVariables.get(\"report_request_count\") || \"0\");",
							"console.log(\"Starting cleanup - previous count: \" + previousCount);",
							"let preserveVars = [];",
							"const preserveVarsStr = pm.collectionVariables.get(\"variables\");",
							"if (preserveVarsStr) {",
							"    try {",
							"        preserveVars = JSON.parse(preserveVarsStr);",
							"    } catch (e) {",
							"        console.log(\"Variables not in JSON format. Using empty list.\");",
							"        preserveVars = [];",
							"    }",
							"}",
							"const systemVars = [",
							"    \"mule_base_url\", \"boomi_base_url\", \"exempted_fields\", \"boomi_auth_type\",",
							"    \"boomi_username\", \"boomi_password\", \"boomi_bearer_token\", \"boomi_api_key\",",
							"    \"boomi_api_key_header\", \"variables\"",
							"];",
							"const allPreservedVars = systemVars.concat(preserveVars);",
							"console.log(\"Will preserve \" + allPreservedVars.length + \" variables\");",
							"let clearedReports = 0;",
							"for (let i = 1; i <= previousCount; i++) {",
							"    const varName = \"report_data_\" + i.toString().padStart(3, '0');",
							"    pm.collectionVariables.unset(varName);",
							"    clearedReports++;",
							"}",
							"const tempVars = [",
							"    \"report_request_count\", \"current_report_index\", \"temp_request_name\",",
							"    \"temp_request_curl\", \"boomi_response\", \"boomi_status\", \"boomi_error\",",
							"    \"csv_full_report\", \"csv_summary_report\"",
							"];",
							"let clearedTemp = 0;",
							"for (let i = 0; i < tempVars.length; i++) {",
							"    const varName = tempVars[i];",
							"    if (allPreservedVars.indexOf(varName) === -1) {",
							"        pm.collectionVariables.unset(varName);",
							"        clearedTemp++;",
							"    }",
							"}",
							"pm.collectionVariables.set(\"report_request_count\", \"0\");",
							"console.log(\"Cleanup done: \" + clearedReports + \" reports, \" + clearedTemp + \" temp vars\");",
							"",
							"let varList = '';",
							"for (let i = 0; i < allPreservedVars.length; i++) {",
							"    varList += `<li>${allPreservedVars[i]}</li>`;",
							"}",
							"",
							"// --- Separated CSS and HTML Structure for robustness ---",
							"const style = `",
							"*{margin:0;padding:0;box-sizing:border-box}",
							"body{font-family:Arial,sans-serif;font-size:12px;padding:30px;text-align:center;background:#f5f5f5}",
							".box{background:#fff;padding:30px;border-radius:4px;max-width:500px;margin:0 auto;box-shadow:0 2px 4px rgba(0,0,0,0.1)}",
							"h2{color:#27ae60;margin-bottom:15px;font-size:18px}",
							".stats{margin:20px 0;padding:15px;background:#ecf0f1;border-radius:4px}",
							"p{color:#7f8c8d;font-size:12px;margin:8px 0}",
							".preserved{margin-top:20px;padding:15px;background:#ecf0f1;border-radius:4px;text-align:left}",
							".preserved h3{font-size:13px;color:#2c3e50;margin-bottom:10px}",
							".preserved ul{list-style:none;padding:0;font-size:11px;color:#7f8c8d;max-height:200px;overflow-y:auto}",
							".preserved li{padding:4px 8px;border-bottom:1px solid #bdc3c7}",
							".preserved li:last-child{border-bottom:none}",
							".signature{margin-top:20px;font-size:10px;color:#95a5a6;font-style:italic}",
							"`;",
							"",
							"const html = `<!DOCTYPE html>",
							"<html>",
							"<head>",
							"<meta charset=\"UTF-8\">",
							"<style>${style}</style>",
							"</head>",
							"<body>",
							"<div class=\"box\">",
							"<h2>Setup Complete</h2>",
							"<div class=\"stats\">",
							"<p>Cleared ${clearedReports} report entries</p>",
							"<p>Cleared ${clearedTemp} temporary variables</p>",
							"</div>",
							"<div class=\"preserved\">",
							"<h3>Preserved Variables (${allPreservedVars.length})</h3>",
							"<ul>${varList}</ul>",
							"</div>",
							"<div class=\"signature\">S. 2025</div>",
							"</div>",
							"</body>",
							"</html>`;",
							"",
							"pm.visualizer.set(html);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Customer",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0:8000/app/ws/soap/customer",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"app",
						"ws",
						"soap",
						"customer"
					]
				}
			},
			"response": []
		},
		{
			"name": "[REPORT] Generate Summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const reportCount = parseInt(pm.collectionVariables.get(\"report_request_count\") || \"0\");",
							"",
							"if (reportCount === 0) {",
							"    pm.visualizer.set(`<div style=\"padding:40px;text-align:center;font-family:Arial;background:#fff3cd\"><h2>No Reports</h2><p>No requests were executed</p></div>`);",
							"    console.log(\"No reports to display\");",
							"    return;",
							"}",
							"",
							"console.log(\"Generating report for \" + reportCount + \" requests\");",
							"",
							"const reports = [];",
							"",
							"for (let i = 1; i <= reportCount; i++) {",
							"    const paddedIndex = String(i).padStart(3, '0');",
							"    const reportData = pm.collectionVariables.get(\"report_data_\" + paddedIndex);",
							"    ",
							"    if (reportData) {",
							"        try {",
							"            const report = JSON.parse(reportData);",
							"            reports.push(report);",
							"            console.log(\"Loaded report \" + i + \": \" + report.requestName);",
							"        } catch (e) {",
							"            console.error(\"Failed to parse report \" + i + \": \" + e.message);",
							"        }",
							"    }",
							"}",
							"",
							"if (reports.length === 0) {",
							"    pm.visualizer.set(`<div style=\"padding:40px;text-align:center;font-family:Arial;background:#fff3cd\"><h2>No Reports</h2><p>Failed to load report data</p></div>`);",
							"    return;",
							"}",
							"",
							"// Generate CSV - FULL DATA NO TRUNCATION",
							"function escapeCSV(text) {",
							"    if (!text && text !== 0) return '';",
							"    const str = String(text);",
							"    if (str.includes('\"') || str.includes(',') || str.includes('\\n') || str.includes('\\r')) {",
							"        return '\"' + str.replace(/\"/g, '\"\"') + '\"';",
							"    }",
							"    return str;",
							"}",
							"",
							"// Full detailed CSV",
							"let csvFullContent = 'Serial,Request Name,Status,Match %,Total Lines,Matched,Mismatched,Exempted,Boomi Status,MuleSoft Status,Timestamp,cURL Command,Boomi Response,MuleSoft Response\\n';",
							"",
							"reports.forEach(function(report) {",
							"    const stats = report.statistics;",
							"    const row = [",
							"        report.serialNumber,",
							"        escapeCSV(report.requestName),",
							"        escapeCSV(stats.status),",
							"        stats.matchPercentage,",
							"        stats.totalLines,",
							"        stats.matchedLines,",
							"        stats.mismatchedLines,",
							"        stats.exemptedLines,",
							"        stats.boomiStatus,",
							"        stats.mulesoftStatus,",
							"        escapeCSV(stats.timestamp),",
							"        escapeCSV(report.curlCommand),",
							"        escapeCSV(report.boomiResponse),",
							"        escapeCSV(report.mulesoftResponse)",
							"    ].join(',');",
							"    ",
							"    csvFullContent += row + '\\n';",
							"});",
							"",
							"// Summary CSV",
							"let csvSummaryContent = 'Serial,Request Name,Status,Match %,Total Lines,Matched,Mismatched,Exempted,Boomi Status,MuleSoft Status,Timestamp\\n';",
							"",
							"reports.forEach(function(report) {",
							"    const stats = report.statistics;",
							"    const row = [",
							"        report.serialNumber,",
							"        escapeCSV(report.requestName),",
							"        escapeCSV(stats.status),",
							"        stats.matchPercentage,",
							"        stats.totalLines,",
							"        stats.matchedLines,",
							"        stats.mismatchedLines,",
							"        stats.exemptedLines,",
							"        stats.boomiStatus,",
							"        stats.mulesoftStatus,",
							"        escapeCSV(stats.timestamp)",
							"    ].join(',');",
							"    ",
							"    csvSummaryContent += row + '\\n';",
							"});",
							"",
							"console.log(\"Full CSV size: \" + csvFullContent.length + \" characters\");",
							"console.log(\"Summary CSV size: \" + csvSummaryContent.length + \" characters\");",
							"",
							"// Store in collection variables for clipboard access",
							"pm.collectionVariables.set(\"csv_full_report\", csvFullContent);",
							"pm.collectionVariables.set(\"csv_summary_report\", csvSummaryContent);",
							"",
							"// Generate summary statistics",
							"const headerBg = reports.some(r => r.statistics.status === 'FAILED') ? '#c0392b' : '#27ae60';",
							"",
							"const summaryStats = {",
							"    total: reports.length,",
							"    passed: reports.filter(r => r.statistics.status === 'PASSED').length,",
							"    failed: reports.filter(r => r.statistics.status === 'FAILED').length,",
							"    totalLines: reports.reduce((sum, r) => sum + r.statistics.totalLines, 0),",
							"    totalMismatches: reports.reduce((sum, r) => sum + r.statistics.mismatchedLines, 0),",
							"    avgMatchPercentage: Math.round(reports.reduce((sum, r) => sum + r.statistics.matchPercentage, 0) / reports.length)",
							"};",
							"",
							"// Generate table rows",
							"let tableRows = reports.map(function(report) {",
							"    const stats = report.statistics;",
							"    const statusClass = stats.status === 'PASSED' ? 'passed' : 'failed';",
							"    ",
							"    return `<tr class=\"${statusClass}\">",
							"        <td>${report.serialNumber}</td>",
							"        <td class=\"req-name\">${report.requestName}</td>",
							"        <td class=\"status\">${stats.status}</td>",
							"        <td>${stats.matchPercentage}%</td>",
							"        <td>${stats.totalLines}</td>",
							"        <td>${stats.matchedLines}</td>",
							"        <td>${stats.mismatchedLines}</td>",
							"        <td>${stats.exemptedLines}</td>",
							"        <td>${stats.boomiStatus}</td>",
							"        <td>${stats.mulesoftStatus}</td>",
							"        <td class=\"timestamp\">${new Date(stats.timestamp).toLocaleString()}</td>",
							"    </tr>`;",
							"}).join('');",
							"",
							"const html = `<!DOCTYPE html>",
							"<html><head><meta charset=\"UTF-8\">",
							"<style>",
							"*{margin:0;padding:0;box-sizing:border-box}",
							"body{font-family:Arial,sans-serif;font-size:12px;padding:20px;background:#f5f5f5}",
							".header{background:${headerBg};color:#fff;padding:20px;border-radius:6px;margin-bottom:20px;box-shadow:0 2px 8px rgba(0,0,0,0.1)}",
							".header h1{font-size:20px;margin-bottom:12px}",
							".summary{display:flex;gap:30px;font-size:13px;flex-wrap:wrap}",
							".summary div{display:flex;flex-direction:column;gap:4px}",
							".summary .label{opacity:0.9;font-size:11px}",
							".summary .value{font-size:18px;font-weight:bold}",
							".copy-section{background:#fff;padding:15px;border-radius:6px;margin-bottom:20px;box-shadow:0 1px 4px rgba(0,0,0,0.1)}",
							".copy-section h3{font-size:14px;margin-bottom:12px;color:#333}",
							".btn-group{display:flex;gap:10px;margin-bottom:8px}",
							".copy-btn{background:#2196F3;color:#fff;border:none;padding:10px 20px;border-radius:4px;cursor:pointer;font-size:12px;font-weight:500;transition:background 0.2s}",
							".copy-btn:hover{background:#1976D2}",
							".copy-btn.secondary{background:#607D8B}",
							".copy-btn.secondary:hover{background:#455A64}",
							".info{font-size:11px;color:#666;padding:8px;background:#f5f5f5;border-radius:4px;margin-top:8px}",
							".table-container{background:#fff;border-radius:6px;overflow:auto;max-height:600px;box-shadow:0 1px 4px rgba(0,0,0,0.1)}",
							"table{width:100%;border-collapse:collapse;font-size:11px}",
							"thead{position:sticky;top:0;background:#37474f;color:#fff;z-index:10}",
							"th{padding:12px 8px;text-align:left;font-weight:600;font-size:10px;border-right:1px solid #263238;white-space:nowrap}",
							"td{padding:8px;border-bottom:1px solid #eceff1;border-right:1px solid #eceff1;font-size:11px;vertical-align:top}",
							".req-name{font-weight:500;color:#1976D2;max-width:250px}",
							".status{font-weight:600;text-transform:uppercase}",
							".timestamp{font-size:10px;color:#666}",
							"tr.passed{background:#f1f8e9}",
							"tr.passed .status{color:#2e7d32}",
							"tr.failed{background:#ffebee}",
							"tr.failed .status{color:#c62828}",
							"tr:hover{background:#e3f2fd}",
							".signature{text-align:right;margin-top:15px;font-size:9px;color:#95a5a6;font-style:italic}",
							"</style>",
							"</head>",
							"<body>",
							"<div class=\"header\">",
							"<h1>Test Execution Report</h1>",
							"<div class=\"summary\">",
							"<div><span class=\"label\">Total Requests</span><span class=\"value\">${summaryStats.total}</span></div>",
							"<div><span class=\"label\">Passed</span><span class=\"value\" style=\"color:#4caf50\">${summaryStats.passed}</span></div>",
							"<div><span class=\"label\">Failed</span><span class=\"value\" style=\"color:#f44336\">${summaryStats.failed}</span></div>",
							"<div><span class=\"label\">Avg Match</span><span class=\"value\">${summaryStats.avgMatchPercentage}%</span></div>",
							"<div><span class=\"label\">Total Lines</span><span class=\"value\">${summaryStats.totalLines}</span></div>",
							"<div><span class=\"label\">Total Mismatches</span><span class=\"value\">${summaryStats.totalMismatches}</span></div>",
							"</div>",
							"</div>",
							"<div class=\"copy-section\">",
							"<h3>Export Reports</h3>",
							"<div class=\"btn-group\">",
							"<button class=\"copy-btn\" id=\"copySummary\">Copy Summary CSV</button>",
							"<button class=\"copy-btn secondary\" id=\"copyFull\">Copy Full CSV (with responses & cURL)</button>",
							"</div>",
							"<div class=\"info\">",
							"<strong>Summary CSV:</strong> ${csvSummaryContent.length.toLocaleString()} characters<br>",
							"<strong>Full CSV:</strong> ${csvFullContent.length.toLocaleString()} characters (includes complete cURL commands)",
							"</div>",
							"</div>",
							"<div class=\"table-container\">",
							"<table>",
							"<thead>",
							"<tr>",
							"<th>#</th>",
							"<th>Request Name</th>",
							"<th>Status</th>",
							"<th>Match %</th>",
							"<th>Lines</th>",
							"<th>Matched</th>",
							"<th>Mismatch</th>",
							"<th>Exempt</th>",
							"<th>Boomi</th>",
							"<th>Mule</th>",
							"<th>Timestamp</th>",
							"</tr>",
							"</thead>",
							"<tbody>${tableRows}</tbody>",
							"</table>",
							"</div>",
							"<div class=\"signature\">S. 2025</div>",
							"<script>",
							"// Access data from Postman collection variables",
							"const summaryCSV = \\`${csvSummaryContent.replace(/`/g, '\\\\`').replace(/\\$/g, '\\\\$')}\\`;",
							"const fullCSV = \\`${csvFullContent.replace(/`/g, '\\\\`').replace(/\\$/g, '\\\\$')}\\`;",
							"",
							"document.getElementById('copySummary').addEventListener('click', function() {",
							"    copyToClipboard(summaryCSV, 'Summary CSV copied to clipboard!');",
							"});",
							"",
							"document.getElementById('copyFull').addEventListener('click', function() {",
							"    copyToClipboard(fullCSV, 'Full CSV copied to clipboard!');",
							"});",
							"",
							"function copyToClipboard(text, message) {",
							"    const textarea = document.createElement('textarea');",
							"    textarea.value = text;",
							"    textarea.style.position = 'fixed';",
							"    textarea.style.opacity = '0';",
							"    document.body.appendChild(textarea);",
							"    textarea.select();",
							"    ",
							"    try {",
							"        document.execCommand('copy');",
							"        showMessage(message + ' (' + text.length.toLocaleString() + ' characters)', 'success');",
							"    } catch (err) {",
							"        showMessage('Failed to copy: ' + err.message, 'error');",
							"    }",
							"    ",
							"    document.body.removeChild(textarea);",
							"}",
							"",
							"function showMessage(text, type) {",
							"    const info = document.querySelector('.info');",
							"    const msg = document.createElement('div');",
							"    msg.textContent = text;",
							"    msg.style.cssText = 'margin-top:8px;padding:8px;border-radius:4px;font-weight:500;';",
							"    msg.style.background = type === 'success' ? '#d4edda' : '#f8d7da';",
							"    msg.style.color = type === 'success' ? '#155724' : '#721c24';",
							"    info.appendChild(msg);",
							"    setTimeout(function() { msg.remove(); }, 3000);",
							"}",
							"</script>",
							"</body>",
							"</html>`;",
							"",
							"pm.visualizer.set(html);",
							"console.log(\"Report visualizer rendered with \" + reports.length + \" entries\");",
							"console.log(\"CSV data stored in collection variables\");",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"// Skip utility requests",
					"if (pm.info.requestName.startsWith(\"_\") || pm.info.requestName.startsWith(\"[\")) {",
					"    console.log(\"Skipping pre-request for: \" + pm.info.requestName);",
					"    return;",
					"}",
					"",
					"const requestCounter = pm.collectionVariables.get(\"report_request_count\");",
					"if (!requestCounter || requestCounter === \"0\") {",
					"    pm.collectionVariables.set(\"report_request_count\", \"0\");",
					"}",
					"",
					"const currentCount = parseInt(pm.collectionVariables.get(\"report_request_count\") || \"0\") + 1;",
					"pm.collectionVariables.set(\"report_request_count\", currentCount.toString());",
					"pm.collectionVariables.set(\"current_report_index\", currentCount.toString());",
					"",
					"console.log(\"Processing SOAP request #\" + currentCount + \": \" + pm.info.requestName);",
					"",
					"const muleBaseUrl = pm.collectionVariables.get(\"mule_base_url\");",
					"const boomiBaseUrl = pm.collectionVariables.get(\"boomi_base_url\");",
					"",
					"if (!muleBaseUrl || !boomiBaseUrl) {",
					"    console.error(\"Missing base URLs\");",
					"    return;",
					"}",
					"",
					"const currentRequest = pm.request;",
					"const method = currentRequest.method;",
					"const requestUrl = pm.request.url;",
					"",
					"// Transform URL",
					"function transformMuleUrlToBoomi(requestUrl, muleBase, boomiBase) {",
					"    const fullUrl = requestUrl.toString();",
					"    let result = fullUrl.replace(muleBase, boomiBase);",
					"    result = result.replace(/\\/[^\\/]+\\/ws\\/(soap|rest)\\//, '/ws/$1/');",
					"    return result;",
					"}",
					"",
					"const boomiUrl = transformMuleUrlToBoomi(requestUrl, muleBaseUrl, boomiBaseUrl);",
					"",
					"if (!boomiUrl) {",
					"    console.error(\"Failed to generate Boomi URL\");",
					"    return;",
					"}",
					"",
					"// Collect headers",
					"const headers = {};",
					"const excludedHeaders = ['host', 'content-length', 'connection', 'user-agent', 'postman-token'];",
					"",
					"currentRequest.headers.each(function(header) {",
					"    if (!header.disabled && excludedHeaders.indexOf(header.key.toLowerCase()) === -1) {",
					"        headers[header.key] = pm.variables.replaceIn(header.value);",
					"    }",
					"});",
					"",
					"// Get SOAP/XML body",
					"let requestBody = null;",
					"if (currentRequest.body && currentRequest.body.mode === 'raw') {",
					"    requestBody = pm.variables.replaceIn(currentRequest.body.raw);",
					"}",
					"",
					"// Handle auth",
					"const authType = pm.collectionVariables.get(\"boomi_auth_type\") || \"same\";",
					"",
					"if (authType !== \"same\") {",
					"    if (authType === \"basic\") {",
					"        const username = pm.collectionVariables.get(\"boomi_username\");",
					"        const password = pm.collectionVariables.get(\"boomi_password\");",
					"        if (username && password) {",
					"            headers['Authorization'] = 'Basic ' + btoa(username + \":\" + password);",
					"        }",
					"    } else if (authType === \"bearer\") {",
					"        const token = pm.collectionVariables.get(\"boomi_bearer_token\");",
					"        if (token) {",
					"            headers['Authorization'] = 'Bearer ' + token;",
					"        }",
					"    }",
					"}",
					"",
					"// Build boomi request",
					"const boomiRequest = {",
					"    url: boomiUrl,",
					"    method: method,",
					"    header: headers,",
					"    body: {",
					"        mode: 'raw',",
					"        raw: requestBody",
					"    }",
					"};",
					"",
					"// Generate cURL",
					"let curlCommand = 'curl --location \\'' + requestUrl.toString() + '\\'';",
					"if (method !== 'GET') {",
					"    curlCommand += ' \\\\\\n--request ' + method;",
					"}",
					"",
					"Object.keys(headers).forEach(function(key) {",
					"    const escapedValue = String(headers[key]).replace(/'/g, \"'\\\\''\");",
					"    curlCommand += ' \\\\\\n--header \\'' + key + ': ' + escapedValue + '\\'';",
					"});",
					"",
					"if (requestBody) {",
					"    const escapedBody = requestBody.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"'\\\\''\");",
					"    curlCommand += ' \\\\\\n--data-raw \\'' + escapedBody + '\\'';",
					"}",
					"",
					"pm.collectionVariables.set(\"temp_request_name\", pm.info.requestName);",
					"pm.collectionVariables.set(\"temp_request_curl\", curlCommand);",
					"",
					"console.log(\"Calling Boomi SOAP API...\");",
					"",
					"pm.sendRequest(boomiRequest, function(err, response) {",
					"    if (err) {",
					"        console.error(\"Boomi request failed: \" + err.message);",
					"        pm.collectionVariables.set(\"boomi_response\", \"ERROR: \" + err.message);",
					"        pm.collectionVariables.set(\"boomi_status\", 0);",
					"    } else {",
					"        pm.collectionVariables.set(\"boomi_response\", response.text());",
					"        pm.collectionVariables.set(\"boomi_status\", response.code);",
					"        console.log(\"Boomi response received: \" + response.code);",
					"    }",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"// Skip utility requests",
					"if (pm.info.requestName.startsWith(\"_\") || pm.info.requestName.startsWith(\"[\")) {",
					"    console.log(\"Skipping post-request for: \" + pm.info.requestName);",
					"    return;",
					"}",
					"",
					"const isCollectionRunner = pm.info.iteration > 0;",
					"const isIndividualExecution = !isCollectionRunner;",
					"",
					"console.log(\"Request: \" + pm.info.requestName + \", Individual: \" + isIndividualExecution);",
					"",
					"let attempts = 0;",
					"const maxAttempts = 20;",
					"const pollInterval = 500;",
					"",
					"function waitForBoomiResponse() {",
					"    attempts++;",
					"    const boomiResponse = pm.collectionVariables.get(\"boomi_response\");",
					"    ",
					"    if (boomiResponse && boomiResponse !== \"\" && boomiResponse !== \"undefined\" && boomiResponse !== null) {",
					"        executeComparison();",
					"    } else if (attempts >= maxAttempts) {",
					"        console.error(\"Boomi response timeout\");",
					"        pm.test(\"Boomi response received\", function() {",
					"            pm.expect.fail(\"Timeout waiting for Boomi response\");",
					"        });",
					"        if (isIndividualExecution) {",
					"            pm.visualizer.set(`<div style=\"padding:40px;text-align:center;font-family:Arial;background:#fff3cd\"><h2>Timeout</h2><p>Boomi response not received</p></div>`);",
					"        }",
					"    } else {",
					"        setTimeout(waitForBoomiResponse, pollInterval);",
					"    }",
					"}",
					"",
					"waitForBoomiResponse();",
					"",
					"function executeComparison() {",
					"    const boomiResponseRaw = pm.collectionVariables.get(\"boomi_response\");",
					"    const boomiStatus = pm.collectionVariables.get(\"boomi_status\");",
					"    const mulesoftResponseRaw = pm.response.text();",
					"    const reportIndex = pm.collectionVariables.get(\"current_report_index\");",
					"    const requestName = pm.collectionVariables.get(\"temp_request_name\") || pm.info.requestName;",
					"    const curlCommand = pm.collectionVariables.get(\"temp_request_curl\") || \"\";",
					"",
					"    if (!boomiResponseRaw || boomiResponseRaw === \"\" || boomiResponseRaw.startsWith(\"ERROR:\")) {",
					"        console.error(\"Boomi response invalid\");",
					"        return;",
					"    }",
					"",
					"    const exemptedFieldsStr = pm.collectionVariables.get(\"exempted_xml_paths\");",
					"    const exemptedFields = exemptedFieldsStr ? JSON.parse(exemptedFieldsStr) : [];",
					"",
					"    // HTML escape function",
					"    function escapeHtml(text) {",
					"        if (!text) return '';",
					"        return String(text)",
					"            .replace(/&/g, '&amp;')",
					"            .replace(/</g, '&lt;')",
					"            .replace(/>/g, '&gt;')",
					"            .replace(/\"/g, '&quot;')",
					"            .replace(/'/g, '&#39;');",
					"    }",
					"",
					"    // Parse XML to simple tree structure",
					"    function parseXML(xmlString) {",
					"        const lines = [];",
					"        const cleanXml = xmlString.trim();",
					"        ",
					"        // Remove XML declaration",
					"        let xml = cleanXml.replace(/<\\?xml[^>]*\\?>/g, '');",
					"        ",
					"        let indent = 0;",
					"        let pos = 0;",
					"        ",
					"        while (pos < xml.length) {",
					"            const tagStart = xml.indexOf('<', pos);",
					"            if (tagStart === -1) break;",
					"            ",
					"            const tagEnd = xml.indexOf('>', tagStart);",
					"            if (tagEnd === -1) break;",
					"            ",
					"            const tag = xml.substring(tagStart, tagEnd + 1);",
					"            ",
					"            // Skip comments",
					"            if (tag.startsWith('<!--')) {",
					"                pos = tagEnd + 1;",
					"                continue;",
					"            }",
					"            ",
					"            // Closing tag",
					"            if (tag.startsWith('</')) {",
					"                // Check if this should be merged with opening tag",
					"                if (lines.length > 0 && lines[lines.length - 1].type === 'open' && !lines[lines.length - 1].merged) {",
					"                    // Merge with previous opening tag",
					"                    const lastLine = lines[lines.length - 1];",
					"                    lastLine.text = lastLine.text + (lastLine.content || '') + tag;",
					"                    lastLine.merged = true;",
					"                    pos = tagEnd + 1;",
					"                } else {",
					"                    indent--;",
					"                    const tagName = tag.substring(2, tag.length - 1).trim();",
					"                    lines.push({",
					"                        text: tag,",
					"                        indent: indent,",
					"                        type: 'close',",
					"                        tag: tagName",
					"                    });",
					"                    pos = tagEnd + 1;",
					"                }",
					"            }",
					"            // Self-closing tag",
					"            else if (tag.endsWith('/>')) {",
					"                const tagContent = tag.substring(1, tag.length - 2).trim();",
					"                const spacePos = tagContent.indexOf(' ');",
					"                const tagName = spacePos > 0 ? tagContent.substring(0, spacePos) : tagContent;",
					"                lines.push({",
					"                    text: tag,",
					"                    indent: indent,",
					"                    type: 'self-close',",
					"                    tag: tagName",
					"                });",
					"                pos = tagEnd + 1;",
					"            }",
					"            // Opening tag",
					"            else {",
					"                const tagContent = tag.substring(1, tag.length - 1).trim();",
					"                const spacePos = tagContent.indexOf(' ');",
					"                const tagName = spacePos > 0 ? tagContent.substring(0, spacePos) : tagContent;",
					"                ",
					"                // Check for text content (no nested tags)",
					"                const nextTagStart = xml.indexOf('<', tagEnd + 1);",
					"                let textContent = '';",
					"                let hasNestedTags = false;",
					"                ",
					"                if (nextTagStart > tagEnd + 1) {",
					"                    textContent = xml.substring(tagEnd + 1, nextTagStart).trim();",
					"                    ",
					"                    // Check if next tag is a closing tag for this element",
					"                    const nextTag = xml.substring(nextTagStart, xml.indexOf('>', nextTagStart) + 1);",
					"                    if (nextTag === '</' + tagName + '>') {",
					"                        // Simple element with text content only - will be merged",
					"                        hasNestedTags = false;",
					"                    } else if (nextTag.startsWith('</')) {",
					"                        // Closing tag but for different element - has nested structure",
					"                        hasNestedTags = false;",
					"                    } else {",
					"                        // Another opening tag - has nested structure",
					"                        hasNestedTags = true;",
					"                    }",
					"                }",
					"                ",
					"                lines.push({",
					"                    text: tag,",
					"                    indent: indent,",
					"                    type: 'open',",
					"                    tag: tagName,",
					"                    content: textContent,",
					"                    hasNested: hasNestedTags,",
					"                    merged: false",
					"                });",
					"                ",
					"                if (hasNestedTags || !textContent) {",
					"                    indent++;",
					"                }",
					"                pos = tagEnd + 1;",
					"            }",
					"        }",
					"        ",
					"        return lines;",
					"    }",
					"",
					"",
					"    const boomiLines = parseXML(boomiResponseRaw);",
					"    const muleLines = parseXML(mulesoftResponseRaw);",
					"",
					"    console.log(\"Boomi lines: \" + boomiLines.length);",
					"    console.log(\"Mule lines: \" + muleLines.length);",
					"",
					"    // Align XML lines",
					"    function alignXMLLines(leftLines, rightLines) {",
					"        const aligned = [];",
					"        let leftIdx = 0;",
					"        let rightIdx = 0;",
					"        ",
					"        while (leftIdx < leftLines.length || rightIdx < rightLines.length) {",
					"            const left = leftLines[leftIdx];",
					"            const right = rightLines[rightIdx];",
					"            ",
					"            if (!left && right) {",
					"                aligned.push({ boomi: { text: '', indent: right.indent, isEmpty: true }, mule: right, status: 'only_mule' });",
					"                rightIdx++;",
					"            } else if (left && !right) {",
					"                aligned.push({ boomi: left, mule: { text: '', indent: left.indent, isEmpty: true }, status: 'only_boomi' });",
					"                leftIdx++;",
					"            } else if (left.tag === right.tag && left.type === right.type) {",
					"                let status = 'match';",
					"                if (left.text !== right.text) {",
					"                    status = 'mismatch';",
					"                }",
					"                aligned.push({ boomi: left, mule: right, status: status });",
					"                leftIdx++;",
					"                rightIdx++;",
					"            } else {",
					"                // Tag mismatch - check if tag exists ahead",
					"                let foundRight = false;",
					"                for (let i = rightIdx + 1; i < Math.min(rightIdx + 10, rightLines.length); i++) {",
					"                    if (rightLines[i].tag === left.tag) {",
					"                        foundRight = true;",
					"                        break;",
					"                    }",
					"                }",
					"                ",
					"                if (!foundRight) {",
					"                    aligned.push({ boomi: left, mule: { text: '', indent: left.indent, isEmpty: true }, status: 'only_boomi' });",
					"                    leftIdx++;",
					"                } else {",
					"                    aligned.push({ boomi: { text: '', indent: right.indent, isEmpty: true }, mule: right, status: 'only_mule' });",
					"                    rightIdx++;",
					"                }",
					"            }",
					"        }",
					"        ",
					"        return aligned;",
					"    }",
					"",
					"    const aligned = alignXMLLines(boomiLines, muleLines);",
					"",
					"    console.log(\"Aligned lines: \" + aligned.length);",
					"",
					"    // Calculate stats",
					"    let totalMismatches = 0;",
					"    let totalExempted = 0;",
					"",
					"    aligned.forEach(function(pair) {",
					"        const tag = pair.boomi.tag || pair.mule.tag;",
					"        let isExempted = false;",
					"        ",
					"        if (tag) {",
					"            for (let i = 0; i < exemptedFields.length; i++) {",
					"                if (tag.indexOf(exemptedFields[i]) !== -1) {",
					"                    pair.status = 'exempted';",
					"                    isExempted = true;",
					"                    totalExempted++;",
					"                    break;",
					"                }",
					"            }",
					"        }",
					"        ",
					"        if (!isExempted && (pair.status === 'mismatch' || pair.status === 'only_boomi' || pair.status === 'only_mule')) {",
					"            totalMismatches++;",
					"        }",
					"    });",
					"",
					"    const totalLines = aligned.length;",
					"    const matchPercentage = totalLines > 0 ? Math.round(((totalLines - totalMismatches - totalExempted) / totalLines) * 100) : 100;",
					"    const statusText = totalMismatches > 0 ? 'FAILED' : 'PASSED';",
					"",
					"    console.log(\"XML Comparison: \" + totalMismatches + \" mismatches, \" + totalExempted + \" exempted\");",
					"",
					"    // Tests",
					"    pm.test(\"Boomi SOAP API responded\", () => pm.expect(boomiStatus).to.be.oneOf([200, 201, 202, 204, 500]));",
					"    pm.test(\"MuleSoft SOAP API responded\", () => pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204, 500]));",
					"    pm.test(\"All non-exempted XML elements match\", () => pm.expect(totalMismatches).to.equal(0));",
					"",
					"    // Store report",
					"    function minifyXML(xml) {",
					"        if (!xml) return \"\";",
					"        return xml.trim().replace(/\\s+/g, ' ').replace(/>\\s+</g, '><');",
					"    }",
					"",
					"    const statsObj = {",
					"        totalLines: totalLines,",
					"        matchedLines: totalLines - totalMismatches - totalExempted,",
					"        mismatchedLines: totalMismatches,",
					"        exemptedLines: totalExempted,",
					"        matchPercentage: matchPercentage,",
					"        status: statusText,",
					"        boomiStatus: boomiStatus,",
					"        mulesoftStatus: pm.response.code,",
					"        timestamp: new Date().toISOString()",
					"    };",
					"",
					"    const reportEntry = {",
					"        serialNumber: parseInt(reportIndex),",
					"        requestName: requestName,",
					"        curlCommand: curlCommand,",
					"        boomiResponse: minifyXML(boomiResponseRaw),",
					"        mulesoftResponse: minifyXML(mulesoftResponseRaw),",
					"        statistics: statsObj",
					"    };",
					"",
					"    pm.collectionVariables.set(\"report_data_\" + reportIndex.padStart(3, '0'), JSON.stringify(reportEntry));",
					"    pm.collectionVariables.set(\"temp_request_name\", \"\");",
					"    pm.collectionVariables.set(\"temp_request_curl\", \"\");",
					"",
					"    // Visualizer for individual execution",
					"    if (isIndividualExecution) {",
					"        console.log(\"Rendering XML visualizer\");",
					"        ",
					"        let tableRows = aligned.map(function(pair) {",
					"            const bLine = pair.boomi;",
					"            const mLine = pair.mule;",
					"            const status = pair.status;",
					"            ",
					"            const bIndent = bLine.indent * 20;",
					"            const mIndent = mLine.indent * 20;",
					"            ",
					"            // HTML escape the text",
					"            const bText = bLine.isEmpty ? '' : escapeHtml(bLine.text);",
					"            const mText = mLine.isEmpty ? '' : escapeHtml(mLine.text);",
					"            ",
					"            let pointer = '';",
					"            if (status === 'mismatch') pointer = '↔';",
					"            else if (status === 'only_boomi') pointer = '→';",
					"            else if (status === 'only_mule') pointer = '←';",
					"            ",
					"            return `<tr class=\"${status}\">",
					"                <td style=\"padding-left:${bIndent}px\">${bText || '<span class=\"empty\">&nbsp;</span>'}</td>",
					"                <td class=\"pointer\">${pointer}</td>",
					"                <td style=\"padding-left:${mIndent}px\">${mText || '<span class=\"empty\">&nbsp;</span>'}</td>",
					"            </tr>`;",
					"        }).join(\"\");",
					"",
					"        const headerBg = totalMismatches > 0 ? '#c0392b' : '#27ae60';",
					"",
					"        const html = `<!DOCTYPE html>",
					"<html><head><meta charset=\"UTF-8\">",
					"<style>",
					"*{margin:0;padding:0;box-sizing:border-box}",
					"body{font-family:Arial,sans-serif;font-size:12px;padding:15px;background:#f5f5f5}",
					".header{background:${headerBg};color:#fff;padding:15px;border-radius:4px;margin-bottom:15px}",
					".header h2{font-size:16px;margin-bottom:8px}",
					".stats{display:flex;gap:20px;font-size:11px;flex-wrap:wrap}",
					".stats div{display:flex;align-items:center;gap:5px}",
					".stats .label{opacity:0.9}",
					".stats .value{font-weight:bold;font-size:13px}",
					".legend{background:#fff;padding:12px;border-radius:4px;margin-bottom:15px;display:flex;gap:15px;align-items:center;font-size:11px;box-shadow:0 1px 3px rgba(0,0,0,0.1)}",
					".legend-title{font-weight:bold;color:#333}",
					".legend-item{display:flex;align-items:center;gap:6px}",
					".legend-box{width:20px;height:14px;border:1px solid #ddd;border-radius:2px}",
					".legend-box.match{background:#fff}",
					".legend-box.mismatch{background:#ffebee}",
					".legend-box.exempted{background:#fff3cd}",
					".legend-box.only_boomi{background:#fffde7}",
					".legend-box.only_mule{background:#e3f2fd}",
					".table-container{background:#fff;border-radius:4px;overflow:auto;max-height:70vh;box-shadow:0 1px 3px rgba(0,0,0,0.1)}",
					"table{width:100%;border-collapse:collapse;font-size:11px;table-layout:fixed}",
					"thead{position:sticky;top:0;background:#34495e;color:#fff;z-index:10}",
					"th{padding:10px 8px;text-align:left;font-weight:600;font-size:10px;border-right:1px solid #2c3e50}",
					"th:first-child{width:47%}",
					"th:nth-child(2){width:6%;text-align:center}",
					"th:last-child{width:47%}",
					"td{padding:4px 8px;border-bottom:1px solid #ecf0f1;border-right:1px solid #ecf0f1;font-family:Consolas,Monaco,monospace;font-size:11px;vertical-align:top;word-wrap:break-word;white-space:pre-wrap;line-height:1.4;color:#333}",
					".pointer{text-align:center;font-size:14px;font-family:Arial;white-space:normal}",
					"tr.match{background:#fff}",
					"tr.mismatch{background:#ffebee}",
					"tr.exempted{background:#fff3cd}",
					"tr.only_boomi{background:#fffde7}",
					"tr.only_mule{background:#e3f2fd}",
					"tr:hover{background:#f1f8e9}",
					".empty{color:#ddd}",
					".signature{text-align:right;margin-top:10px;font-size:9px;color:#95a5a6;font-style:italic}",
					"</style>",
					"</head>",
					"<body>",
					"<div class=\"header\">",
					"<h2>XML/SOAP Response Comparison: ${escapeHtml(requestName)}</h2>",
					"<div class=\"stats\">",
					"<div><span class=\"label\">Lines:</span><span class=\"value\">${totalLines}</span></div>",
					"<div><span class=\"label\">Mismatched:</span><span class=\"value\">${totalMismatches}</span></div>",
					"<div><span class=\"label\">Exempted:</span><span class=\"value\">${totalExempted}</span></div>",
					"<div><span class=\"label\">Match:</span><span class=\"value\">${matchPercentage}%</span></div>",
					"<div><span class=\"label\">Status:</span><span class=\"value\">${statusText}</span></div>",
					"</div>",
					"</div>",
					"<div class=\"legend\">",
					"<span class=\"legend-title\">Legend:</span>",
					"<div class=\"legend-item\"><div class=\"legend-box match\"></div><span>Match</span></div>",
					"<div class=\"legend-item\"><div class=\"legend-box mismatch\"></div><span>Mismatch</span></div>",
					"<div class=\"legend-item\"><div class=\"legend-box exempted\"></div><span>Exempted</span></div>",
					"<div class=\"legend-item\"><div class=\"legend-box only_boomi\"></div><span>Only Boomi</span></div>",
					"<div class=\"legend-item\"><div class=\"legend-box only_mule\"></div><span>Only Mule</span></div>",
					"</div>",
					"<div class=\"table-container\">",
					"<table>",
					"<thead><tr><th>Boomi XML</th><th></th><th>MuleSoft XML</th></tr></thead>",
					"<tbody>${tableRows}</tbody>",
					"</table>",
					"</div>",
					"<div class=\"signature\">S. 2025</div>",
					"</body>",
					"</html>`;",
					"        ",
					"        pm.visualizer.set(html);",
					"        console.log(\"XML Visualizer rendered with \" + aligned.length + \" rows\");",
					"    }",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mule_base_url",
			"value": ""
		},
		{
			"key": "boomi_base_url",
			"value": ""
		},
		{
			"key": "exempted_fields",
			"value": ""
		},
		{
			"key": "request_name",
			"value": ""
		},
		{
			"key": "mule_url",
			"value": ""
		},
		{
			"key": "boomi_url",
			"value": ""
		},
		{
			"key": "soap_request_body",
			"value": ""
		},
		{
			"key": "soap_action",
			"value": ""
		},
		{
			"key": "mule_response",
			"value": ""
		},
		{
			"key": "mule_status",
			"value": ""
		},
		{
			"key": "mule_time",
			"value": ""
		},
		{
			"key": "both_responses_received",
			"value": ""
		},
		{
			"key": "report_data",
			"value": ""
		},
		{
			"key": "test_counter",
			"value": ""
		},
		{
			"key": "report_request_count",
			"value": ""
		},
		{
			"key": "current_report_index",
			"value": ""
		},
		{
			"key": "temp_request_name",
			"value": ""
		},
		{
			"key": "temp_request_curl",
			"value": ""
		},
		{
			"key": "boomi_response",
			"value": ""
		},
		{
			"key": "boomi_status",
			"value": ""
		},
		{
			"key": "report_data_001",
			"value": ""
		},
		{
			"key": "report_data_002",
			"value": ""
		},
		{
			"key": "report_data_003",
			"value": ""
		},
		{
			"key": "report_data_004",
			"value": ""
		},
		{
			"key": "report_data_005",
			"value": ""
		},
		{
			"key": "report_data_006",
			"value": ""
		}
	]
}