{
	"info": {
		"_postman_id": "76b1439f-5bbd-4066-9d6d-cde3b95e117f",
		"name": "Migration Boomi to Mulesoft",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41089880"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Get Github User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://0.0.0.0:8000/app/users/:userId",
							"protocol": "http",
							"host": [
								"0",
								"0",
								"0",
								"0"
							],
							"port": "8000",
							"path": [
								"app",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "devsha256"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Azure User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://0.0.0.0:8000/app/users/:userId",
							"protocol": "http",
							"host": [
								"0",
								"0",
								"0",
								"0"
							],
							"port": "8000",
							"path": [
								"app",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "devsha256"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create normal user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-correlation-id",
						"value": "{{$guid}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"_id\": \"68fdd692ee041eff10866322\",\n    \"index\": 0,\n    \"isActive\": false,\n    \"balance\": \"$1,366.61\",\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 20,\n    \"eyeColor\": \"green\",\n    \"name\": \"Rice Wilder\",\n    \"gender\": \"male\",\n    \"company\": \"ENORMO\",\n    \"username\": \"ricewilder@enormo.com\",\n    \"phone\": \"+1 (856) 473-2111\",\n    \"address\": \"350 Bijou Avenue, Ivanhoe, Colorado, 2260\",\n    \"about\": \"Excepteur mollit laboris laboris amet ad minim dolore sunt commodo cupidatat incididunt. Amet est consectetur ipsum do consequat ut dolore. Fugiat laboris magna adipisicing elit minim minim pariatur dolore aute. Voluptate ullamco laborum eiusmod laborum aute id reprehenderit.\\r\\n\",\n    \"registered\": \"2014-11-12T04:47:41 -06:-30\",\n    \"latitude\": -6.202625,\n    \"longitude\": 133.647082,\n    \"tags\": [\n        \"elit\",\n        \"voluptate\",\n        \"labore\",\n        \"laboris\",\n        \"anim\",\n        \"ghost\"\n    ],\n    \"friends\": [\n        {\n            \"id\": 0,\n            \"name\": \"Alvarez Tucker\"\n        },\n        {\n            \"id\": 1,\n            \"name\": \"Lilian Bartlett\"\n        }\n    ],\n    \"greeting\": \"Hello, Rice Wilder! You have 1 unread messages.\",\n    \"favoriteFruit\": \"banana\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://0.0.0.0:8000/app/user",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"app",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "[SETUP] Clear Previous Reports",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const previousCount = parseInt(pm.collectionVariables.get(\"report_request_count\") || \"0\");",
							"console.log(\"Starting cleanup - previous count: \" + previousCount);",
							"let preserveVars = [];",
							"const preserveVarsStr = pm.collectionVariables.get(\"variables\");",
							"if (preserveVarsStr) {",
							"    try {",
							"        preserveVars = JSON.parse(preserveVarsStr);",
							"    } catch (e) {",
							"        console.log(\"Variables not in JSON format. Using empty list.\");",
							"        preserveVars = [];",
							"    }",
							"}",
							"const systemVars = [",
							"    \"mule_base_url\", \"boomi_base_url\", \"exempted_fields\", \"boomi_auth_type\",",
							"    \"boomi_username\", \"boomi_password\", \"boomi_bearer_token\", \"boomi_api_key\",",
							"    \"boomi_api_key_header\", \"variables\"",
							"];",
							"const allPreservedVars = systemVars.concat(preserveVars);",
							"console.log(\"Will preserve \" + allPreservedVars.length + \" variables\");",
							"let clearedReports = 0;",
							"for (let i = 1; i <= previousCount; i++) {",
							"    const varName = \"report_data_\" + i.toString().padStart(3, '0');",
							"    pm.collectionVariables.unset(varName);",
							"    clearedReports++;",
							"}",
							"const tempVars = [",
							"    \"report_request_count\", \"current_report_index\", \"temp_request_name\",",
							"    \"temp_request_curl\", \"boomi_response\", \"boomi_status\", \"boomi_error\",",
							"    \"csv_full_report\", \"csv_summary_report\"",
							"];",
							"let clearedTemp = 0;",
							"for (let i = 0; i < tempVars.length; i++) {",
							"    const varName = tempVars[i];",
							"    if (allPreservedVars.indexOf(varName) === -1) {",
							"        pm.collectionVariables.unset(varName);",
							"        clearedTemp++;",
							"    }",
							"}",
							"pm.collectionVariables.set(\"report_request_count\", \"0\");",
							"console.log(\"Cleanup done: \" + clearedReports + \" reports, \" + clearedTemp + \" temp vars\");",
							"",
							"let varList = '';",
							"for (let i = 0; i < allPreservedVars.length; i++) {",
							"    varList += `<li>${allPreservedVars[i]}</li>`;",
							"}",
							"",
							"// --- Separated CSS and HTML Structure for robustness ---",
							"const style = `",
							"*{margin:0;padding:0;box-sizing:border-box}",
							"body{font-family:Arial,sans-serif;font-size:12px;padding:30px;text-align:center;background:#f5f5f5}",
							".box{background:#fff;padding:30px;border-radius:4px;max-width:500px;margin:0 auto;box-shadow:0 2px 4px rgba(0,0,0,0.1)}",
							"h2{color:#27ae60;margin-bottom:15px;font-size:18px}",
							".stats{margin:20px 0;padding:15px;background:#ecf0f1;border-radius:4px}",
							"p{color:#7f8c8d;font-size:12px;margin:8px 0}",
							".preserved{margin-top:20px;padding:15px;background:#ecf0f1;border-radius:4px;text-align:left}",
							".preserved h3{font-size:13px;color:#2c3e50;margin-bottom:10px}",
							".preserved ul{list-style:none;padding:0;font-size:11px;color:#7f8c8d;max-height:200px;overflow-y:auto}",
							".preserved li{padding:4px 8px;border-bottom:1px solid #bdc3c7}",
							".preserved li:last-child{border-bottom:none}",
							".signature{margin-top:20px;font-size:10px;color:#95a5a6;font-style:italic}",
							"`;",
							"",
							"const html = `<!DOCTYPE html>",
							"<html>",
							"<head>",
							"<meta charset=\"UTF-8\">",
							"<style>${style}</style>",
							"</head>",
							"<body>",
							"<div class=\"box\">",
							"<h2>Setup Complete</h2>",
							"<div class=\"stats\">",
							"<p>Cleared ${clearedReports} report entries</p>",
							"<p>Cleared ${clearedTemp} temporary variables</p>",
							"</div>",
							"<div class=\"preserved\">",
							"<h3>Preserved Variables (${allPreservedVars.length})</h3>",
							"<ul>${varList}</ul>",
							"</div>",
							"<div class=\"signature\">S. 2025</div>",
							"</div>",
							"</body>",
							"</html>`;",
							"",
							"pm.visualizer.set(html);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "[REPORT] Generate Summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const reportCount = parseInt(pm.collectionVariables.get(\"report_request_count\") || \"0\");",
							"",
							"if (reportCount === 0) {",
							"    pm.visualizer.set(`<div style=\"padding:40px;text-align:center;font-family:Arial;background:#fff3cd\"><h2>No Reports</h2><p>No requests were executed</p></div>`);",
							"    console.log(\"No reports to display\");",
							"    return;",
							"}",
							"",
							"console.log(\"Generating report for \" + reportCount + \" requests\");",
							"",
							"const reports = [];",
							"",
							"for (let i = 1; i <= reportCount; i++) {",
							"    const paddedIndex = String(i).padStart(3, '0');",
							"    const reportData = pm.collectionVariables.get(\"report_data_\" + paddedIndex);",
							"    ",
							"    if (reportData) {",
							"        try {",
							"            const report = JSON.parse(reportData);",
							"            reports.push(report);",
							"            console.log(\"Loaded report \" + i + \": \" + report.requestName);",
							"        } catch (e) {",
							"            console.error(\"Failed to parse report \" + i + \": \" + e.message);",
							"        }",
							"    }",
							"}",
							"",
							"if (reports.length === 0) {",
							"    pm.visualizer.set(`<div style=\"padding:40px;text-align:center;font-family:Arial;background:#fff3cd\"><h2>No Reports</h2><p>Failed to load report data</p></div>`);",
							"    return;",
							"}",
							"",
							"// Generate CSV - FULL DATA NO TRUNCATION",
							"function escapeCSV(text) {",
							"    if (!text && text !== 0) return '';",
							"    const str = String(text);",
							"    if (str.includes('\"') || str.includes(',') || str.includes('\\n') || str.includes('\\r')) {",
							"        return '\"' + str.replace(/\"/g, '\"\"') + '\"';",
							"    }",
							"    return str;",
							"}",
							"",
							"// Full detailed CSV",
							"let csvFullContent = 'Serial,Request Name,Status,Match %,Total Lines,Matched,Mismatched,Exempted,Boomi Status,MuleSoft Status,Timestamp,cURL Command,Boomi Response,MuleSoft Response\\n';",
							"",
							"reports.forEach(function(report) {",
							"    const stats = report.statistics;",
							"    const row = [",
							"        report.serialNumber,",
							"        escapeCSV(report.requestName),",
							"        escapeCSV(stats.status),",
							"        stats.matchPercentage,",
							"        stats.totalLines,",
							"        stats.matchedLines,",
							"        stats.mismatchedLines,",
							"        stats.exemptedLines,",
							"        stats.boomiStatus,",
							"        stats.mulesoftStatus,",
							"        escapeCSV(stats.timestamp),",
							"        escapeCSV(report.curlCommand),",
							"        escapeCSV(report.boomiResponse),",
							"        escapeCSV(report.mulesoftResponse)",
							"    ].join(',');",
							"    ",
							"    csvFullContent += row + '\\n';",
							"});",
							"",
							"// Summary CSV",
							"let csvSummaryContent = 'Serial,Request Name,Status,Match %,Total Lines,Matched,Mismatched,Exempted,Boomi Status,MuleSoft Status,Timestamp\\n';",
							"",
							"reports.forEach(function(report) {",
							"    const stats = report.statistics;",
							"    const row = [",
							"        report.serialNumber,",
							"        escapeCSV(report.requestName),",
							"        escapeCSV(stats.status),",
							"        stats.matchPercentage,",
							"        stats.totalLines,",
							"        stats.matchedLines,",
							"        stats.mismatchedLines,",
							"        stats.exemptedLines,",
							"        stats.boomiStatus,",
							"        stats.mulesoftStatus,",
							"        escapeCSV(stats.timestamp)",
							"    ].join(',');",
							"    ",
							"    csvSummaryContent += row + '\\n';",
							"});",
							"",
							"console.log(\"Full CSV size: \" + csvFullContent.length + \" characters\");",
							"console.log(\"Summary CSV size: \" + csvSummaryContent.length + \" characters\");",
							"",
							"// Store in collection variables for clipboard access",
							"pm.collectionVariables.set(\"csv_full_report\", csvFullContent);",
							"pm.collectionVariables.set(\"csv_summary_report\", csvSummaryContent);",
							"",
							"// Generate summary statistics",
							"const headerBg = reports.some(r => r.statistics.status === 'FAILED') ? '#c0392b' : '#27ae60';",
							"",
							"const summaryStats = {",
							"    total: reports.length,",
							"    passed: reports.filter(r => r.statistics.status === 'PASSED').length,",
							"    failed: reports.filter(r => r.statistics.status === 'FAILED').length,",
							"    totalLines: reports.reduce((sum, r) => sum + r.statistics.totalLines, 0),",
							"    totalMismatches: reports.reduce((sum, r) => sum + r.statistics.mismatchedLines, 0),",
							"    avgMatchPercentage: Math.round(reports.reduce((sum, r) => sum + r.statistics.matchPercentage, 0) / reports.length)",
							"};",
							"",
							"// Generate table rows",
							"let tableRows = reports.map(function(report) {",
							"    const stats = report.statistics;",
							"    const statusClass = stats.status === 'PASSED' ? 'passed' : 'failed';",
							"    ",
							"    return `<tr class=\"${statusClass}\">",
							"        <td>${report.serialNumber}</td>",
							"        <td class=\"req-name\">${report.requestName}</td>",
							"        <td class=\"status\">${stats.status}</td>",
							"        <td>${stats.matchPercentage}%</td>",
							"        <td>${stats.totalLines}</td>",
							"        <td>${stats.matchedLines}</td>",
							"        <td>${stats.mismatchedLines}</td>",
							"        <td>${stats.exemptedLines}</td>",
							"        <td>${stats.boomiStatus}</td>",
							"        <td>${stats.mulesoftStatus}</td>",
							"        <td class=\"timestamp\">${new Date(stats.timestamp).toLocaleString()}</td>",
							"    </tr>`;",
							"}).join('');",
							"",
							"const html = `<!DOCTYPE html>",
							"<html><head><meta charset=\"UTF-8\">",
							"<style>",
							"*{margin:0;padding:0;box-sizing:border-box}",
							"body{font-family:Arial,sans-serif;font-size:12px;padding:20px;background:#f5f5f5}",
							".header{background:${headerBg};color:#fff;padding:20px;border-radius:6px;margin-bottom:20px;box-shadow:0 2px 8px rgba(0,0,0,0.1)}",
							".header h1{font-size:20px;margin-bottom:12px}",
							".summary{display:flex;gap:30px;font-size:13px;flex-wrap:wrap}",
							".summary div{display:flex;flex-direction:column;gap:4px}",
							".summary .label{opacity:0.9;font-size:11px}",
							".summary .value{font-size:18px;font-weight:bold}",
							".copy-section{background:#fff;padding:15px;border-radius:6px;margin-bottom:20px;box-shadow:0 1px 4px rgba(0,0,0,0.1)}",
							".copy-section h3{font-size:14px;margin-bottom:12px;color:#333}",
							".btn-group{display:flex;gap:10px;margin-bottom:8px}",
							".copy-btn{background:#2196F3;color:#fff;border:none;padding:10px 20px;border-radius:4px;cursor:pointer;font-size:12px;font-weight:500;transition:background 0.2s}",
							".copy-btn:hover{background:#1976D2}",
							".copy-btn.secondary{background:#607D8B}",
							".copy-btn.secondary:hover{background:#455A64}",
							".info{font-size:11px;color:#666;padding:8px;background:#f5f5f5;border-radius:4px;margin-top:8px}",
							".table-container{background:#fff;border-radius:6px;overflow:auto;max-height:600px;box-shadow:0 1px 4px rgba(0,0,0,0.1)}",
							"table{width:100%;border-collapse:collapse;font-size:11px}",
							"thead{position:sticky;top:0;background:#37474f;color:#fff;z-index:10}",
							"th{padding:12px 8px;text-align:left;font-weight:600;font-size:10px;border-right:1px solid #263238;white-space:nowrap}",
							"td{padding:8px;border-bottom:1px solid #eceff1;border-right:1px solid #eceff1;font-size:11px;vertical-align:top}",
							".req-name{font-weight:500;color:#1976D2;max-width:250px}",
							".status{font-weight:600;text-transform:uppercase}",
							".timestamp{font-size:10px;color:#666}",
							"tr.passed{background:#f1f8e9}",
							"tr.passed .status{color:#2e7d32}",
							"tr.failed{background:#ffebee}",
							"tr.failed .status{color:#c62828}",
							"tr:hover{background:#e3f2fd}",
							".signature{text-align:right;margin-top:15px;font-size:9px;color:#95a5a6;font-style:italic}",
							"</style>",
							"</head>",
							"<body>",
							"<div class=\"header\">",
							"<h1>Test Execution Report</h1>",
							"<div class=\"summary\">",
							"<div><span class=\"label\">Total Requests</span><span class=\"value\">${summaryStats.total}</span></div>",
							"<div><span class=\"label\">Passed</span><span class=\"value\" style=\"color:#4caf50\">${summaryStats.passed}</span></div>",
							"<div><span class=\"label\">Failed</span><span class=\"value\" style=\"color:#f44336\">${summaryStats.failed}</span></div>",
							"<div><span class=\"label\">Avg Match</span><span class=\"value\">${summaryStats.avgMatchPercentage}%</span></div>",
							"<div><span class=\"label\">Total Lines</span><span class=\"value\">${summaryStats.totalLines}</span></div>",
							"<div><span class=\"label\">Total Mismatches</span><span class=\"value\">${summaryStats.totalMismatches}</span></div>",
							"</div>",
							"</div>",
							"<div class=\"copy-section\">",
							"<h3>Export Reports</h3>",
							"<div class=\"btn-group\">",
							"<button class=\"copy-btn\" id=\"copySummary\">Copy Summary CSV</button>",
							"<button class=\"copy-btn secondary\" id=\"copyFull\">Copy Full CSV (with responses & cURL)</button>",
							"</div>",
							"<div class=\"info\">",
							"<strong>Summary CSV:</strong> ${csvSummaryContent.length.toLocaleString()} characters<br>",
							"<strong>Full CSV:</strong> ${csvFullContent.length.toLocaleString()} characters (includes complete cURL commands)",
							"</div>",
							"</div>",
							"<div class=\"table-container\">",
							"<table>",
							"<thead>",
							"<tr>",
							"<th>#</th>",
							"<th>Request Name</th>",
							"<th>Status</th>",
							"<th>Match %</th>",
							"<th>Lines</th>",
							"<th>Matched</th>",
							"<th>Mismatch</th>",
							"<th>Exempt</th>",
							"<th>Boomi</th>",
							"<th>Mule</th>",
							"<th>Timestamp</th>",
							"</tr>",
							"</thead>",
							"<tbody>${tableRows}</tbody>",
							"</table>",
							"</div>",
							"<div class=\"signature\">S. 2025</div>",
							"<script>",
							"// Access data from Postman collection variables",
							"const summaryCSV = \\`${csvSummaryContent.replace(/`/g, '\\\\`').replace(/\\$/g, '\\\\$')}\\`;",
							"const fullCSV = \\`${csvFullContent.replace(/`/g, '\\\\`').replace(/\\$/g, '\\\\$')}\\`;",
							"",
							"document.getElementById('copySummary').addEventListener('click', function() {",
							"    copyToClipboard(summaryCSV, 'Summary CSV copied to clipboard!');",
							"});",
							"",
							"document.getElementById('copyFull').addEventListener('click', function() {",
							"    copyToClipboard(fullCSV, 'Full CSV copied to clipboard!');",
							"});",
							"",
							"function copyToClipboard(text, message) {",
							"    const textarea = document.createElement('textarea');",
							"    textarea.value = text;",
							"    textarea.style.position = 'fixed';",
							"    textarea.style.opacity = '0';",
							"    document.body.appendChild(textarea);",
							"    textarea.select();",
							"    ",
							"    try {",
							"        document.execCommand('copy');",
							"        showMessage(message + ' (' + text.length.toLocaleString() + ' characters)', 'success');",
							"    } catch (err) {",
							"        showMessage('Failed to copy: ' + err.message, 'error');",
							"    }",
							"    ",
							"    document.body.removeChild(textarea);",
							"}",
							"",
							"function showMessage(text, type) {",
							"    const info = document.querySelector('.info');",
							"    const msg = document.createElement('div');",
							"    msg.textContent = text;",
							"    msg.style.cssText = 'margin-top:8px;padding:8px;border-radius:4px;font-weight:500;';",
							"    msg.style.background = type === 'success' ? '#d4edda' : '#f8d7da';",
							"    msg.style.color = type === 'success' ? '#155724' : '#721c24';",
							"    info.appendChild(msg);",
							"    setTimeout(function() { msg.remove(); }, 3000);",
							"}",
							"</script>",
							"</body>",
							"</html>`;",
							"",
							"pm.visualizer.set(html);",
							"console.log(\"Report visualizer rendered with \" + reports.length + \" entries\");",
							"console.log(\"CSV data stored in collection variables\");",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"// Skip utility requests",
					"if (pm.info.requestName.startsWith(\"_\") || pm.info.requestName.startsWith(\"[\")) {",
					"    console.log(\"Skipping pre-request for: \" + pm.info.requestName);",
					"    return;",
					"}",
					"",
					"const requestCounter = pm.collectionVariables.get(\"report_request_count\");",
					"if (!requestCounter || requestCounter === \"0\") {",
					"    pm.collectionVariables.set(\"report_request_count\", \"0\");",
					"}",
					"",
					"const currentCount = parseInt(pm.collectionVariables.get(\"report_request_count\") || \"0\") + 1;",
					"pm.collectionVariables.set(\"report_request_count\", currentCount.toString());",
					"pm.collectionVariables.set(\"current_report_index\", currentCount.toString());",
					"",
					"console.log(\"Processing request #\" + currentCount + \": \" + pm.info.requestName);",
					"",
					"const muleBaseUrl = pm.collectionVariables.get(\"mule_base_url\");",
					"const boomiBaseUrl = pm.collectionVariables.get(\"boomi_base_url\");",
					"",
					"if (!muleBaseUrl || !boomiBaseUrl) {",
					"    console.error(\"Missing base URLs in collection variables\");",
					"    return;",
					"}",
					"",
					"const currentRequest = pm.request;",
					"const method = currentRequest.method;",
					"const requestUrl = pm.request.url;",
					"",
					"function transformMuleUrlToBoomi(requestUrl, muleBase, boomiBase) {",
					"    try {",
					"        const fullUrl = requestUrl.toString();",
					"        let pathAfterBase = fullUrl.replace(muleBase, '');",
					"        if (pathAfterBase.startsWith('/')) {",
					"            pathAfterBase = pathAfterBase.substring(1);",
					"        }",
					"        const urlParts = pathAfterBase.split('?');",
					"        const pathPart = urlParts[0];",
					"        const queryPart = urlParts.length > 1 ? '?' + urlParts[1] : '';",
					"        const pathSegments = pathPart.split('/').filter(function(s) { return s.length > 0; });",
					"        if (pathSegments.length > 0 && pathSegments[0] !== 'ws') {",
					"            pathSegments.shift();",
					"        }",
					"        const cleanBoomiBase = boomiBase.replace(/\\/$/, '');",
					"        const transformedPath = pathSegments.join('/');",
					"        return cleanBoomiBase + '/' + transformedPath + queryPart;",
					"    } catch (error) {",
					"        console.error(\"URL transformation failed:\", error);",
					"        return null;",
					"    }",
					"}",
					"",
					"const boomiUrl = transformMuleUrlToBoomi(requestUrl, muleBaseUrl, boomiBaseUrl);",
					"",
					"if (!boomiUrl) {",
					"    console.error(\"Failed to generate Boomi URL\");",
					"    return;",
					"}",
					"",
					"// Collect headers with RESOLVED VALUES (not variables)",
					"const headers = {};",
					"const excludedHeaders = ['host', 'content-length', 'connection', 'user-agent', 'postman-token'];",
					"",
					"currentRequest.headers.each(function(header) {",
					"    const headerKey = header.key.toLowerCase();",
					"    if (!header.disabled && excludedHeaders.indexOf(headerKey) === -1) {",
					"        // Use pm.variables.replaceIn to resolve dynamic variables like {{$guid}}",
					"        const resolvedValue = pm.variables.replaceIn(header.value);",
					"        headers[header.key] = resolvedValue;",
					"    }",
					"});",
					"",
					"let requestBody = null;",
					"let bodyMode = null;",
					"",
					"if (currentRequest.body && ['POST', 'PUT', 'PATCH', 'DELETE'].indexOf(method) !== -1) {",
					"    bodyMode = currentRequest.body.mode;",
					"    switch(bodyMode) {",
					"        case 'raw':",
					"            // Resolve variables in body too",
					"            requestBody = pm.variables.replaceIn(currentRequest.body.raw);",
					"            break;",
					"        case 'formdata':",
					"            const formData = {};",
					"            currentRequest.body.formdata.each(function(item) {",
					"                if (!item.disabled) {",
					"                    formData[item.key] = pm.variables.replaceIn(item.value);",
					"                }",
					"            });",
					"            requestBody = formData;",
					"            break;",
					"        case 'urlencoded':",
					"            const urlencodedData = {};",
					"            currentRequest.body.urlencoded.each(function(item) {",
					"                if (!item.disabled) {",
					"                    urlencodedData[item.key] = pm.variables.replaceIn(item.value);",
					"                }",
					"            });",
					"            requestBody = urlencodedData;",
					"            break;",
					"        case 'graphql':",
					"            requestBody = JSON.stringify({",
					"                query: pm.variables.replaceIn(currentRequest.body.graphql.query),",
					"                variables: currentRequest.body.graphql.variables",
					"            });",
					"            break;",
					"    }",
					"}",
					"",
					"if (requestBody && method !== 'GET') {",
					"    const existingContentType = headers['Content-Type'] || headers['content-type'];",
					"    if (!existingContentType && bodyMode === 'raw') {",
					"        const trimmedBody = requestBody.trim();",
					"        if (trimmedBody.startsWith('{') || trimmedBody.startsWith('[')) {",
					"            headers['Content-Type'] = 'application/json';",
					"        } else if (trimmedBody.startsWith('<')) {",
					"            headers['Content-Type'] = 'application/xml';",
					"        }",
					"    }",
					"}",
					"",
					"const authType = pm.collectionVariables.get(\"boomi_auth_type\") || \"same\";",
					"",
					"if (authType !== \"same\") {",
					"    if (authType === \"basic\") {",
					"        const boomiUsername = pm.collectionVariables.get(\"boomi_username\");",
					"        const boomiPassword = pm.collectionVariables.get(\"boomi_password\");",
					"        if (boomiUsername && boomiPassword) {",
					"            headers['Authorization'] = 'Basic ' + btoa(boomiUsername + \":\" + boomiPassword);",
					"        }",
					"    } else if (authType === \"bearer\") {",
					"        const boomiToken = pm.collectionVariables.get(\"boomi_bearer_token\");",
					"        if (boomiToken) {",
					"            headers['Authorization'] = 'Bearer ' + boomiToken;",
					"        }",
					"    } else if (authType === \"api-key\") {",
					"        const boomiApiKey = pm.collectionVariables.get(\"boomi_api_key\");",
					"        const boomiApiKeyHeader = pm.collectionVariables.get(\"boomi_api_key_header\") || \"X-API-Key\";",
					"        if (boomiApiKey) {",
					"            headers[boomiApiKeyHeader] = boomiApiKey;",
					"        }",
					"    }",
					"}",
					"",
					"const boomiRequest = {",
					"    url: boomiUrl,",
					"    method: method,",
					"    header: headers",
					"};",
					"",
					"if (requestBody) {",
					"    if (bodyMode === 'raw') {",
					"        boomiRequest.body = { mode: 'raw', raw: requestBody };",
					"    } else if (bodyMode === 'formdata') {",
					"        boomiRequest.body = { mode: 'formdata', formdata: requestBody };",
					"    } else if (bodyMode === 'urlencoded') {",
					"        boomiRequest.body = { mode: 'urlencoded', urlencoded: requestBody };",
					"    } else {",
					"        boomiRequest.body = { mode: 'raw', raw: typeof requestBody === 'string' ? requestBody : JSON.stringify(requestBody) };",
					"    }",
					"}",
					"",
					"// Generate COMPLETE cURL with resolved values",
					"let curlCommand = 'curl --location \\'' + requestUrl.toString() + '\\'';",
					"",
					"if (method !== 'GET') {",
					"    curlCommand += ' \\\\\\n--request ' + method;",
					"}",
					"",
					"// Add all headers with RESOLVED values",
					"const headerKeys = Object.keys(headers);",
					"headerKeys.forEach(function(headerKey) {",
					"    const headerValue = headers[headerKey];",
					"    const escapedValue = String(headerValue).replace(/'/g, \"'\\\\''\");",
					"    curlCommand += ' \\\\\\n--header \\'' + headerKey + ': ' + escapedValue + '\\'';",
					"});",
					"",
					"// Add COMPLETE body without any truncation",
					"if (requestBody && bodyMode === 'raw') {",
					"    let escapedBody = String(requestBody).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"'\\\\''\");",
					"    curlCommand += ' \\\\\\n--data-raw \\'' + escapedBody + '\\'';",
					"}",
					"",
					"// Store in collection variable - NO LENGTH LIMIT",
					"pm.collectionVariables.set(\"temp_request_name\", pm.info.requestName);",
					"pm.collectionVariables.set(\"temp_request_curl\", curlCommand);",
					"",
					"console.log(\"cURL generated successfully, length: \" + curlCommand.length + \" characters\");",
					"",
					"pm.sendRequest(boomiRequest, function(err, response) {",
					"    if (err) {",
					"        console.error(\"Boomi request failed:\", err.message);",
					"        pm.collectionVariables.set(\"boomi_response\", \"ERROR: \" + err.message);",
					"        pm.collectionVariables.set(\"boomi_status\", 0);",
					"    } else {",
					"        pm.collectionVariables.set(\"boomi_response\", response.text());",
					"        pm.collectionVariables.set(\"boomi_status\", response.code);",
					"        console.log(\"Boomi response received: \" + response.code);",
					"    }",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"// Skip utility requests",
					"if (pm.info.requestName.startsWith(\"_\") || pm.info.requestName.startsWith(\"[\")) {",
					"    console.log(\"Skipping utility request: \" + pm.info.requestName);",
					"    return;",
					"}",
					"",
					"const isCollectionRunner = pm.info.iteration > 0;",
					"const isIndividualExecution = !isCollectionRunner;",
					"",
					"console.log(\"Request: \" + pm.info.requestName + \", Individual: \" + isIndividualExecution);",
					"",
					"let attempts = 0;",
					"const maxAttempts = 20;",
					"const pollInterval = 500;",
					"",
					"function waitForBoomiResponse() {",
					"    attempts++;",
					"    const boomiResponse = pm.collectionVariables.get(\"boomi_response\");",
					"    ",
					"    if (boomiResponse && boomiResponse !== \"\" && boomiResponse !== \"undefined\" && boomiResponse !== null) {",
					"        executeComparison();",
					"    } else if (attempts >= maxAttempts) {",
					"        console.error(\"Boomi response timeout\");",
					"        pm.test(\"Boomi response received\", function() {",
					"            pm.expect.fail(\"Timeout waiting for Boomi response\");",
					"        });",
					"        if (isIndividualExecution) {",
					"            pm.visualizer.set(`<div style=\"padding:40px;text-align:center;font-family:Arial;background:#fff3cd\"><h2>Timeout</h2><p>Boomi response not received</p></div>`);",
					"        }",
					"    } else {",
					"        setTimeout(waitForBoomiResponse, pollInterval);",
					"    }",
					"}",
					"",
					"waitForBoomiResponse();",
					"",
					"function executeComparison() {",
					"    const boomiResponseRaw = pm.collectionVariables.get(\"boomi_response\");",
					"    const boomiStatus = pm.collectionVariables.get(\"boomi_status\");",
					"    const mulesoftResponseRaw = pm.response.text();",
					"    const reportIndex = pm.collectionVariables.get(\"current_report_index\");",
					"    const requestName = pm.collectionVariables.get(\"temp_request_name\") || pm.info.requestName;",
					"    const curlCommand = pm.collectionVariables.get(\"temp_request_curl\") || \"\";",
					"",
					"    if (!boomiResponseRaw || boomiResponseRaw === \"\" || boomiResponseRaw.startsWith(\"ERROR:\")) {",
					"        console.error(\"Boomi response invalid\");",
					"        return;",
					"    }",
					"",
					"    const exemptedFieldsStr = pm.collectionVariables.get(\"exempted_fields\");",
					"    const exemptedFields = exemptedFieldsStr ? JSON.parse(exemptedFieldsStr) : [];",
					"",
					"    // Parse responses",
					"    let boomi, mule;",
					"    try { boomi = JSON.parse(boomiResponseRaw); } catch (e) { boomi = boomiResponseRaw; }",
					"    try { mule = JSON.parse(mulesoftResponseRaw); } catch (e) { mule = mulesoftResponseRaw; }",
					"",
					"    // ===== IMPROVED ARRAY ALIGNMENT WITH LCS =====",
					"    ",
					"    function normalizeArrays(obj) {",
					"        if (Array.isArray(obj)) {",
					"            const allPrimitive = obj.every(item => typeof item !== 'object' || item === null);",
					"            if (allPrimitive) {",
					"                return obj.slice().sort();",
					"            }",
					"            return obj.map(normalizeArrays);",
					"        } else if (obj !== null && typeof obj === 'object') {",
					"            const normalized = {};",
					"            Object.keys(obj).sort().forEach(key => {",
					"                normalized[key] = normalizeArrays(obj[key]);",
					"            });",
					"            return normalized;",
					"        }",
					"        return obj;",
					"    }",
					"    ",
					"    const boomiNorm = normalizeArrays(boomi);",
					"    const muleNorm = normalizeArrays(mule);",
					"    ",
					"    // Build JSON lines tracking array membership",
					"    function buildJSONLines(obj, path, indent) {",
					"        const lines = [];",
					"        path = path || '';",
					"        indent = indent || 0;",
					"        ",
					"        if (obj === null) {",
					"            lines.push({",
					"                text: 'null',",
					"                indent: indent,",
					"                path: path,",
					"                isPrimitive: true",
					"            });",
					"        } else if (typeof obj !== 'object') {",
					"            lines.push({",
					"                text: JSON.stringify(obj),",
					"                indent: indent,",
					"                path: path,",
					"                isPrimitive: true,",
					"                value: obj",
					"            });",
					"        } else if (Array.isArray(obj)) {",
					"            const arrayPath = path;",
					"            const allPrimitive = obj.every(item => typeof item !== 'object' || item === null);",
					"            ",
					"            lines.push({ ",
					"                text: '[', ",
					"                indent: indent, ",
					"                path: path, ",
					"                type: 'open-array' ",
					"            });",
					"            ",
					"            obj.forEach((item, idx) => {",
					"                const itemPath = path + '[' + idx + ']';",
					"                const comma = idx < obj.length - 1 ? ',' : '';",
					"                const itemLines = buildJSONLines(item, itemPath, indent + 1);",
					"                ",
					"                itemLines.forEach((line, lineIdx) => {",
					"                    if (lineIdx === itemLines.length - 1) {",
					"                        line.text += comma;",
					"                    }",
					"                    if (allPrimitive && line.isPrimitive) {",
					"                        line.arrayPath = arrayPath;",
					"                        line.arrayValue = item;",
					"                    }",
					"                    lines.push(line);",
					"                });",
					"            });",
					"            ",
					"            lines.push({ ",
					"                text: ']', ",
					"                indent: indent, ",
					"                path: path, ",
					"                type: 'close-array' ",
					"            });",
					"        } else {",
					"            lines.push({ ",
					"                text: '{', ",
					"                indent: indent, ",
					"                path: path, ",
					"                type: 'open-object' ",
					"            });",
					"            ",
					"            const keys = Object.keys(obj).sort();",
					"            keys.forEach((key, idx) => {",
					"                const keyPath = path ? path + '.' + key : key;",
					"                const value = obj[key];",
					"                const comma = idx < keys.length - 1 ? ',' : '';",
					"                ",
					"                if (typeof value === 'object' && value !== null) {",
					"                    lines.push({",
					"                        text: '\"' + key + '\": ',",
					"                        indent: indent + 1,",
					"                        path: keyPath,",
					"                        type: 'key'",
					"                    });",
					"                    const valueLines = buildJSONLines(value, keyPath, indent + 1);",
					"                    valueLines.forEach((line, lineIdx) => {",
					"                        if (lineIdx === valueLines.length - 1) {",
					"                            line.text += comma;",
					"                        }",
					"                        lines.push(line);",
					"                    });",
					"                } else {",
					"                    lines.push({",
					"                        text: '\"' + key + '\": ' + JSON.stringify(value) + comma,",
					"                        indent: indent + 1,",
					"                        path: keyPath,",
					"                        isPrimitive: true,",
					"                        value: value",
					"                    });",
					"                }",
					"            });",
					"            ",
					"            lines.push({ ",
					"                text: '}', ",
					"                indent: indent, ",
					"                path: path, ",
					"                type: 'close-object' ",
					"            });",
					"        }",
					"        ",
					"        return lines;",
					"    }",
					"    ",
					"    const boomiLines = buildJSONLines(boomiNorm, '', 0);",
					"    const muleLines = buildJSONLines(muleNorm, '', 0);",
					"    ",
					"    // LCS-based alignment for primitive arrays",
					"    function alignPrimitiveArrays(bLines, mLines) {",
					"        const arrayGroups = {};",
					"        ",
					"        // Group array elements by their parent array path",
					"        bLines.forEach((line, idx) => {",
					"            if (line.arrayPath) {",
					"                if (!arrayGroups[line.arrayPath]) {",
					"                    arrayGroups[line.arrayPath] = { boomi: [], mule: [] };",
					"                }",
					"                arrayGroups[line.arrayPath].boomi.push({ line, idx });",
					"            }",
					"        });",
					"        ",
					"        mLines.forEach((line, idx) => {",
					"            if (line.arrayPath) {",
					"                if (!arrayGroups[line.arrayPath]) {",
					"                    arrayGroups[line.arrayPath] = { boomi: [], mule: [] };",
					"                }",
					"                arrayGroups[line.arrayPath].mule.push({ line, idx });",
					"            }",
					"        });",
					"        ",
					"        const alignmentMap = { boomi: new Map(), mule: new Map() };",
					"        ",
					"        // For each array, create alignment using LCS approach",
					"        Object.keys(arrayGroups).forEach(arrayPath => {",
					"            const bItems = arrayGroups[arrayPath].boomi;",
					"            const mItems = arrayGroups[arrayPath].mule;",
					"            ",
					"            const bValues = bItems.map(item => item.line.arrayValue);",
					"            const mValues = mItems.map(item => item.line.arrayValue);",
					"            ",
					"            // Simple LCS alignment",
					"            const aligned = [];",
					"            let bIdx = 0;",
					"            let mIdx = 0;",
					"            ",
					"            while (bIdx < bValues.length || mIdx < mValues.length) {",
					"                if (bIdx >= bValues.length) {",
					"                    // Only mule remaining",
					"                    aligned.push({ bIdx: null, mIdx: mIdx });",
					"                    mIdx++;",
					"                } else if (mIdx >= mValues.length) {",
					"                    // Only boomi remaining",
					"                    aligned.push({ bIdx: bIdx, mIdx: null });",
					"                    bIdx++;",
					"                } else if (bValues[bIdx] === mValues[mIdx]) {",
					"                    // Match",
					"                    aligned.push({ bIdx: bIdx, mIdx: mIdx });",
					"                    bIdx++;",
					"                    mIdx++;",
					"                } else {",
					"                    // Check if current boomi exists ahead in mule",
					"                    let foundInMule = -1;",
					"                    for (let i = mIdx + 1; i < Math.min(mIdx + 10, mValues.length); i++) {",
					"                        if (bValues[bIdx] === mValues[i]) {",
					"                            foundInMule = i;",
					"                            break;",
					"                        }",
					"                    }",
					"                    ",
					"                    // Check if current mule exists ahead in boomi",
					"                    let foundInBoomi = -1;",
					"                    for (let i = bIdx + 1; i < Math.min(bIdx + 10, bValues.length); i++) {",
					"                        if (mValues[mIdx] === bValues[i]) {",
					"                            foundInBoomi = i;",
					"                            break;",
					"                        }",
					"                    }",
					"                    ",
					"                    if (foundInMule === -1 && foundInBoomi === -1) {",
					"                        // Both only exist in their respective arrays",
					"                        aligned.push({ bIdx: bIdx, mIdx: null });",
					"                        aligned.push({ bIdx: null, mIdx: mIdx });",
					"                        bIdx++;",
					"                        mIdx++;",
					"                    } else if (foundInMule !== -1 && (foundInBoomi === -1 || (foundInMule - mIdx) <= (foundInBoomi - bIdx))) {",
					"                        // Current mule is unique, advance it",
					"                        aligned.push({ bIdx: null, mIdx: mIdx });",
					"                        mIdx++;",
					"                    } else {",
					"                        // Current boomi is unique, advance it",
					"                        aligned.push({ bIdx: bIdx, mIdx: null });",
					"                        bIdx++;",
					"                    }",
					"                }",
					"            }",
					"            ",
					"            // Create mapping",
					"            aligned.forEach(pair => {",
					"                if (pair.bIdx !== null && pair.mIdx !== null) {",
					"                    alignmentMap.boomi.set(bItems[pair.bIdx].idx, mItems[pair.mIdx].idx);",
					"                    alignmentMap.mule.set(mItems[pair.mIdx].idx, bItems[pair.bIdx].idx);",
					"                }",
					"            });",
					"        });",
					"        ",
					"        return alignmentMap;",
					"    }",
					"    ",
					"    const arrayAlignment = alignPrimitiveArrays(boomiLines, muleLines);",
					"    ",
					"    // Smart alignment with array awareness",
					"    function alignWithArrays(leftLines, rightLines, arrayMap) {",
					"        const aligned = [];",
					"        let leftIdx = 0;",
					"        let rightIdx = 0;",
					"        ",
					"        while (leftIdx < leftLines.length || rightIdx < rightLines.length) {",
					"            const leftLine = leftLines[leftIdx];",
					"            const rightLine = rightLines[rightIdx];",
					"            ",
					"            if (!leftLine && rightLine) {",
					"                aligned.push({",
					"                    boomi: { text: '', indent: rightLine.indent, isEmpty: true, path: rightLine.path },",
					"                    mule: rightLine,",
					"                    status: 'only_mule'",
					"                });",
					"                rightIdx++;",
					"            } else if (leftLine && !rightLine) {",
					"                aligned.push({",
					"                    boomi: leftLine,",
					"                    mule: { text: '', indent: leftLine.indent, isEmpty: true, path: leftLine.path },",
					"                    status: 'only_boomi'",
					"                });",
					"                leftIdx++;",
					"            } else {",
					"                // Check if this is a mapped array element",
					"                const mappedRight = arrayMap.boomi.get(leftIdx);",
					"                const mappedLeft = arrayMap.mule.get(rightIdx);",
					"                ",
					"                if (mappedRight === rightIdx) {",
					"                    // Aligned array elements",
					"                    aligned.push({",
					"                        boomi: leftLine,",
					"                        mule: rightLine,",
					"                        status: 'match'",
					"                    });",
					"                    leftIdx++;",
					"                    rightIdx++;",
					"                } else if (leftLine.arrayPath && !mappedRight) {",
					"                    // Unmatched left array element",
					"                    aligned.push({",
					"                        boomi: leftLine,",
					"                        mule: { text: '', indent: leftLine.indent, isEmpty: true, path: leftLine.path },",
					"                        status: 'only_boomi'",
					"                    });",
					"                    leftIdx++;",
					"                } else if (rightLine.arrayPath && !mappedLeft) {",
					"                    // Unmatched right array element",
					"                    aligned.push({",
					"                        boomi: { text: '', indent: rightLine.indent, isEmpty: true, path: rightLine.path },",
					"                        mule: rightLine,",
					"                        status: 'only_mule'",
					"                    });",
					"                    rightIdx++;",
					"                } else if (leftLine.path === rightLine.path && leftLine.type === rightLine.type) {",
					"                    // Regular path match",
					"                    let status = 'match';",
					"                    if (leftLine.text !== rightLine.text && !leftLine.type) {",
					"                        status = 'mismatch';",
					"                    }",
					"                    ",
					"                    aligned.push({",
					"                        boomi: leftLine,",
					"                        mule: rightLine,",
					"                        status: status",
					"                    });",
					"                    leftIdx++;",
					"                    rightIdx++;",
					"                } else {",
					"                    // Different paths - determine which to advance",
					"                    let rightHasPath = false;",
					"                    for (let i = rightIdx + 1; i < Math.min(rightIdx + 30, rightLines.length); i++) {",
					"                        if (rightLines[i].path === leftLine.path && rightLines[i].type === leftLine.type) {",
					"                            rightHasPath = true;",
					"                            break;",
					"                        }",
					"                    }",
					"                    ",
					"                    let leftHasPath = false;",
					"                    for (let i = leftIdx + 1; i < Math.min(leftIdx + 30, leftLines.length); i++) {",
					"                        if (leftLines[i].path === rightLine.path && leftLines[i].type === rightLine.type) {",
					"                            leftHasPath = true;",
					"                            break;",
					"                        }",
					"                    }",
					"                    ",
					"                    if (!rightHasPath) {",
					"                        aligned.push({",
					"                            boomi: leftLine,",
					"                            mule: { text: '', indent: leftLine.indent, isEmpty: true, path: leftLine.path },",
					"                            status: 'only_boomi'",
					"                        });",
					"                        leftIdx++;",
					"                    } else if (!leftHasPath) {",
					"                        aligned.push({",
					"                            boomi: { text: '', indent: rightLine.indent, isEmpty: true, path: rightLine.path },",
					"                            mule: rightLine,",
					"                            status: 'only_mule'",
					"                        });",
					"                        rightIdx++;",
					"                    } else {",
					"                        // Both exist - advance based on path comparison",
					"                        if (leftLine.path < rightLine.path) {",
					"                            aligned.push({",
					"                                boomi: leftLine,",
					"                                mule: { text: '', indent: leftLine.indent, isEmpty: true, path: leftLine.path },",
					"                                status: 'only_boomi'",
					"                            });",
					"                            leftIdx++;",
					"                        } else {",
					"                            aligned.push({",
					"                                boomi: { text: '', indent: rightLine.indent, isEmpty: true, path: rightLine.path },",
					"                                mule: rightLine,",
					"                                status: 'only_mule'",
					"                            });",
					"                            rightIdx++;",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"        ",
					"        return aligned;",
					"    }",
					"    ",
					"    const aligned = alignWithArrays(boomiLines, muleLines, arrayAlignment);",
					"    ",
					"    // Calculate stats",
					"    let totalMismatches = 0;",
					"    let totalExempted = 0;",
					"    ",
					"    aligned.forEach(pair => {",
					"        const path = pair.boomi.path || pair.mule.path;",
					"        let isExempted = false;",
					"        ",
					"        if (path) {",
					"            for (let j = 0; j < exemptedFields.length; j++) {",
					"                if (path.includes(exemptedFields[j])) {",
					"                    pair.status = 'exempted';",
					"                    isExempted = true;",
					"                    totalExempted++;",
					"                    break;",
					"                }",
					"            }",
					"        }",
					"        ",
					"        if (!isExempted && (pair.status === 'mismatch' || pair.status === 'only_boomi' || pair.status === 'only_mule')) {",
					"            totalMismatches++;",
					"        }",
					"    });",
					"    ",
					"    const totalLines = aligned.length;",
					"",
					"    console.log(\"Comparison: \" + totalMismatches + \" mismatches, \" + totalExempted + \" exempted\");",
					"",
					"    // Tests",
					"    pm.test(\"Boomi API responded\", () => pm.expect(boomiStatus).to.be.oneOf([200, 201, 202, 204]));",
					"    pm.test(\"MuleSoft API responded\", () => pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]));",
					"    pm.test(\"All non-exempted fields match\", () => pm.expect(totalMismatches).to.equal(0));",
					"",
					"    const matchPercentage = totalLines > 0 ? Math.round(((totalLines - totalMismatches - totalExempted) / totalLines) * 100) : 100;",
					"    const statusText = totalMismatches > 0 ? 'FAILED' : 'PASSED';",
					"",
					"        // Store report data - NO TRUNCATION ANYWHERE",
					"    function minifyResponse(text) {",
					"        if (!text) return \"\";",
					"        try { ",
					"            // Minify JSON but don't truncate",
					"            return JSON.stringify(JSON.parse(text.trim()));",
					"        } catch (e) { ",
					"            // If not JSON, return as-is without truncation",
					"            return text.trim();",
					"        }",
					"    }",
					"",
					"    const statsObj = {",
					"        totalLines: totalLines,",
					"        matchedLines: totalLines - totalMismatches - totalExempted,",
					"        mismatchedLines: totalMismatches,",
					"        exemptedLines: totalExempted,",
					"        matchPercentage: matchPercentage,",
					"        status: statusText,",
					"        boomiStatus: boomiStatus,",
					"        mulesoftStatus: pm.response.code,",
					"        timestamp: new Date().toISOString()",
					"    };",
					"",
					"    const reportEntry = {",
					"        serialNumber: parseInt(reportIndex),",
					"        requestName: requestName,",
					"        curlCommand: curlCommand,  // FULL cURL stored here",
					"        boomiResponse: minifyResponse(boomiResponseRaw),",
					"        mulesoftResponse: minifyResponse(mulesoftResponseRaw),",
					"        statistics: statsObj",
					"    };",
					"",
					"    const paddedIndex = reportIndex.padStart(3, '0');",
					"    ",
					"    // Store with full data",
					"    pm.collectionVariables.set(\"report_data_\" + paddedIndex, JSON.stringify(reportEntry));",
					"    ",
					"    console.log(\"Report stored with cURL length: \" + curlCommand.length);",
					"",
					"    pm.collectionVariables.set(\"temp_request_name\", \"\");",
					"    pm.collectionVariables.set(\"temp_request_curl\", \"\");",
					"",
					"",
					"",
					"    // Visualizer",
					"    if (isIndividualExecution) {",
					"        console.log(\"Rendering side-by-side JSON visualizer\");",
					"        ",
					"        let tableRows = aligned.map(pair => {",
					"            const bLine = pair.boomi;",
					"            const mLine = pair.mule;",
					"            const status = pair.status;",
					"            ",
					"            const bIndent = bLine.indent * 16;",
					"            const mIndent = mLine.indent * 16;",
					"            ",
					"            const bText = bLine.isEmpty ? '' : bLine.text;",
					"            const mText = mLine.isEmpty ? '' : mLine.text;",
					"            ",
					"            let pointer = '';",
					"            if (status === 'mismatch') pointer = '↔';",
					"            else if (status === 'only_boomi') pointer = '→';",
					"            else if (status === 'only_mule') pointer = '←';",
					"            ",
					"            return `<tr class=\"${status}\">",
					"                <td style=\"padding-left:${bIndent}px\">${bText || '<span class=\"empty\">&nbsp;</span>'}</td>",
					"                <td class=\"pointer\">${pointer}</td>",
					"                <td style=\"padding-left:${mIndent}px\">${mText || '<span class=\"empty\">&nbsp;</span>'}</td>",
					"            </tr>`;",
					"        }).join(\"\");",
					"",
					"        const headerBg = totalMismatches > 0 ? '#c0392b' : '#27ae60';",
					"",
					"        const html = `<!DOCTYPE html>",
					"<html><head><meta charset=\"UTF-8\">",
					"<style>",
					"*{margin:0;padding:0;box-sizing:border-box}",
					"body{font-family:Arial,sans-serif;font-size:12px;padding:15px;background:#f5f5f5}",
					".header{background:${headerBg};color:#fff;padding:15px;border-radius:4px;margin-bottom:15px}",
					".header h2{font-size:16px;margin-bottom:8px}",
					".stats{display:flex;gap:20px;font-size:11px;flex-wrap:wrap}",
					".stats div{display:flex;align-items:center;gap:5px}",
					".stats .label{opacity:0.9}",
					".stats .value{font-weight:bold;font-size:13px}",
					".legend{background:#fff;padding:12px;border-radius:4px;margin-bottom:15px;display:flex;gap:15px;align-items:center;font-size:11px;box-shadow:0 1px 3px rgba(0,0,0,0.1)}",
					".legend-title{font-weight:bold;color:#333}",
					".legend-item{display:flex;align-items:center;gap:6px}",
					".legend-box{width:20px;height:14px;border:1px solid #ddd;border-radius:2px}",
					".legend-box.match{background:#fff}",
					".legend-box.mismatch{background:#ffebee}",
					".legend-box.exempted{background:#fff3cd}",
					".legend-box.only_boomi{background:#fffde7}",
					".legend-box.only_mule{background:#e3f2fd}",
					".table-container{background:#fff;border-radius:4px;overflow:auto;max-height:70vh;box-shadow:0 1px 3px rgba(0,0,0,0.1)}",
					"table{width:100%;border-collapse:collapse;font-size:11px;table-layout:fixed}",
					"thead{position:sticky;top:0;background:#34495e;color:#fff;z-index:10}",
					"th{padding:10px 8px;text-align:left;font-weight:600;font-size:10px;border-right:1px solid #2c3e50}",
					"th:first-child{width:47%}",
					"th:nth-child(2){width:6%;text-align:center}",
					"th:last-child{width:47%}",
					"td{padding:4px 8px;border-bottom:1px solid #ecf0f1;border-right:1px solid #ecf0f1;font-family:Consolas,Monaco,monospace;font-size:11px;vertical-align:top;word-wrap:break-word;white-space:pre-wrap;line-height:1.4;max-width:480px}",
					".pointer{text-align:center;font-size:14px;font-family:Arial;white-space:normal}",
					"tr.match{background:#fff}",
					"tr.mismatch{background:#ffebee}",
					"tr.exempted{background:#fff3cd}",
					"tr.only_boomi{background:#fffde7}",
					"tr.only_mule{background:#e3f2fd}",
					"tr:hover{background:#f1f8e9}",
					".empty{color:#ddd}",
					".signature{text-align:right;margin-top:10px;font-size:9px;color:#95a5a6;font-style:italic}",
					"</style>",
					"</head>",
					"<body>",
					"<div class=\"header\">",
					"<h2>Response Comparison: ${requestName}</h2>",
					"<div class=\"stats\">",
					"<div><span class=\"label\">Lines:</span><span class=\"value\">${totalLines}</span></div>",
					"<div><span class=\"label\">Mismatched:</span><span class=\"value\">${totalMismatches}</span></div>",
					"<div><span class=\"label\">Exempted:</span><span class=\"value\">${totalExempted}</span></div>",
					"<div><span class=\"label\">Match:</span><span class=\"value\">${matchPercentage}%</span></div>",
					"<div><span class=\"label\">Status:</span><span class=\"value\">${statusText}</span></div>",
					"</div>",
					"</div>",
					"<div class=\"legend\">",
					"<span class=\"legend-title\">Legend:</span>",
					"<div class=\"legend-item\"><div class=\"legend-box match\"></div><span>Match</span></div>",
					"<div class=\"legend-item\"><div class=\"legend-box mismatch\"></div><span>Mismatch</span></div>",
					"<div class=\"legend-item\"><div class=\"legend-box exempted\"></div><span>Exempted</span></div>",
					"<div class=\"legend-item\"><div class=\"legend-box only_boomi\"></div><span>Only Boomi</span></div>",
					"<div class=\"legend-item\"><div class=\"legend-box only_mule\"></div><span>Only Mule</span></div>",
					"</div>",
					"<div class=\"table-container\">",
					"<table>",
					"<thead><tr><th>Boomi JSON</th><th></th><th>MuleSoft JSON</th></tr></thead>",
					"<tbody>${tableRows}</tbody>",
					"</table>",
					"</div>",
					"<div class=\"signature\">S. 2025</div>",
					"</body>",
					"</html>`;",
					"        ",
					"        pm.visualizer.set(html);",
					"        console.log(\"Visualizer rendered with LCS array alignment\");",
					"    }",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mule_base_url",
			"value": ""
		},
		{
			"key": "boomi_base_url",
			"value": ""
		},
		{
			"key": "exempted_fields",
			"value": ""
		},
		{
			"key": "report_request_count",
			"value": ""
		},
		{
			"key": "current_report_index",
			"value": ""
		},
		{
			"key": "temp_request_name",
			"value": ""
		},
		{
			"key": "temp_request_curl",
			"value": ""
		},
		{
			"key": "boomi_response",
			"value": ""
		},
		{
			"key": "boomi_status",
			"value": ""
		},
		{
			"key": "report_data_001",
			"value": ""
		},
		{
			"key": "report_data_002",
			"value": ""
		},
		{
			"key": "report_data_003",
			"value": ""
		},
		{
			"key": "report_data_004",
			"value": ""
		},
		{
			"key": "report_data_005",
			"value": ""
		},
		{
			"key": "report_data_006",
			"value": ""
		},
		{
			"key": "report_data_007",
			"value": ""
		},
		{
			"key": "report_data_008",
			"value": ""
		},
		{
			"key": "report_data_009",
			"value": ""
		},
		{
			"key": "report_data_010",
			"value": ""
		},
		{
			"key": "csv_full_report",
			"value": ""
		},
		{
			"key": "csv_summary_report",
			"value": ""
		},
		{
			"key": "report_data_011",
			"value": ""
		},
		{
			"key": "report_data_012",
			"value": ""
		},
		{
			"key": "report_data_013",
			"value": ""
		},
		{
			"key": "report_data_014",
			"value": ""
		},
		{
			"key": "report_data_015",
			"value": ""
		},
		{
			"key": "report_data_016",
			"value": ""
		},
		{
			"key": "report_data_017",
			"value": ""
		},
		{
			"key": "report_data_018",
			"value": ""
		},
		{
			"key": "report_data_019",
			"value": ""
		},
		{
			"key": "report_data_020",
			"value": ""
		}
	]
}