{
	"info": {
		"_postman_id": "76b1439f-5bbd-4066-9d6d-cde3b95e117f",
		"name": "Migration Boomi to Mulesoft",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41089880"
	},
	"item": [
		{
			"name": "[SETUP] Clear Previous Reports",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const previousCount = parseInt(pm.collectionVariables.get(\"report_request_count\") || \"0\");",
							"console.log(\"Starting cleanup - previous count: \" + previousCount);",
							"let preserveVars = [];",
							"const preserveVarsStr = pm.collectionVariables.get(\"variables\");",
							"if (preserveVarsStr) {",
							"    try {",
							"        preserveVars = JSON.parse(preserveVarsStr);",
							"    } catch (e) {",
							"        console.log(\"Variables not in JSON format. Using empty list.\");",
							"        preserveVars = [];",
							"    }",
							"}",
							"const systemVars = [",
							"    \"mule_base_url\", \"boomi_base_url\", \"exempted_fields\", \"boomi_auth_type\",",
							"    \"boomi_username\", \"boomi_password\", \"boomi_bearer_token\", \"boomi_api_key\",",
							"    \"boomi_api_key_header\", \"variables\"",
							"];",
							"const allPreservedVars = systemVars.concat(preserveVars);",
							"console.log(\"Will preserve \" + allPreservedVars.length + \" variables\");",
							"let clearedReports = 0;",
							"for (let i = 1; i <= previousCount; i++) {",
							"    const varName = \"report_data_\" + i.toString().padStart(3, '0');",
							"    pm.collectionVariables.unset(varName);",
							"    clearedReports++;",
							"}",
							"const tempVars = [",
							"    \"report_request_count\", \"current_report_index\", \"temp_request_name\",",
							"    \"temp_request_curl\", \"boomi_response\", \"boomi_status\", \"boomi_error\",",
							"    \"csv_full_report\", \"csv_summary_report\"",
							"];",
							"let clearedTemp = 0;",
							"for (let i = 0; i < tempVars.length; i++) {",
							"    const varName = tempVars[i];",
							"    if (allPreservedVars.indexOf(varName) === -1) {",
							"        pm.collectionVariables.unset(varName);",
							"        clearedTemp++;",
							"    }",
							"}",
							"pm.collectionVariables.set(\"report_request_count\", \"0\");",
							"console.log(\"Cleanup done: \" + clearedReports + \" reports, \" + clearedTemp + \" temp vars\");",
							"",
							"let varList = '';",
							"for (let i = 0; i < allPreservedVars.length; i++) {",
							"    varList += `<li>${allPreservedVars[i]}</li>`;",
							"}",
							"",
							"// --- Separated CSS and HTML Structure for robustness ---",
							"const style = `",
							"*{margin:0;padding:0;box-sizing:border-box}",
							"body{font-family:Arial,sans-serif;font-size:12px;padding:30px;text-align:center;background:#f5f5f5}",
							".box{background:#fff;padding:30px;border-radius:4px;max-width:500px;margin:0 auto;box-shadow:0 2px 4px rgba(0,0,0,0.1)}",
							"h2{color:#27ae60;margin-bottom:15px;font-size:18px}",
							".stats{margin:20px 0;padding:15px;background:#ecf0f1;border-radius:4px}",
							"p{color:#7f8c8d;font-size:12px;margin:8px 0}",
							".preserved{margin-top:20px;padding:15px;background:#ecf0f1;border-radius:4px;text-align:left}",
							".preserved h3{font-size:13px;color:#2c3e50;margin-bottom:10px}",
							".preserved ul{list-style:none;padding:0;font-size:11px;color:#7f8c8d;max-height:200px;overflow-y:auto}",
							".preserved li{padding:4px 8px;border-bottom:1px solid #bdc3c7}",
							".preserved li:last-child{border-bottom:none}",
							".signature{margin-top:20px;font-size:10px;color:#95a5a6;font-style:italic}",
							"`;",
							"",
							"const html = `<!DOCTYPE html>",
							"<html>",
							"<head>",
							"<meta charset=\"UTF-8\">",
							"<style>${style}</style>",
							"</head>",
							"<body>",
							"<div class=\"box\">",
							"<h2>Setup Complete</h2>",
							"<div class=\"stats\">",
							"<p>Cleared ${clearedReports} report entries</p>",
							"<p>Cleared ${clearedTemp} temporary variables</p>",
							"</div>",
							"<div class=\"preserved\">",
							"<h3>Preserved Variables (${allPreservedVars.length})</h3>",
							"<ul>${varList}</ul>",
							"</div>",
							"<div class=\"signature\">S. 2025</div>",
							"</div>",
							"</body>",
							"</html>`;",
							"",
							"pm.visualizer.set(html);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Github User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0:8000/app/users/:userId",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"app",
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "devsha256"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Github User V2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://0.0.0.0:8000/app/users/:userId",
					"protocol": "http",
					"host": [
						"0",
						"0",
						"0",
						"0"
					],
					"port": "8000",
					"path": [
						"app",
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "devsha256"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[REPORT] Generate Summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const totalCount = parseInt(pm.collectionVariables.get(\"report_request_count\") || \"0\");",
							"const reportData = [];",
							"",
							"for (let i = 1; i <= totalCount; i++) {",
							"    const paddedIndex = i.toString().padStart(3, '0');",
							"    const dataStr = pm.collectionVariables.get(\"report_data_\" + paddedIndex);",
							"    if (dataStr) {",
							"        try {",
							"            reportData.push(JSON.parse(dataStr));",
							"        } catch (e) {",
							"            console.error(\"Failed to parse report entry \" + i);",
							"        }",
							"    }",
							"}",
							"",
							"console.log(\"Report generated: \" + reportData.length + \" requests\");",
							"",
							"let fullCsvContent = 'Serial,Request,cURL,Boomi Response,MuleSoft Response,Total,Matched,Mismatched,Exempted,Match %,Status,Boomi Status,MuleSoft Status,Timestamp\\n';",
							"",
							"for (let i = 0; i < reportData.length; i++) {",
							"    const row = reportData[i];",
							"    const stats = row.statistics;",
							"    ",
							"    function escapeCSV(str) {",
							"        if (!str) return '\"\"';",
							"        str = String(str).substring(0, 1000);",
							"        return '\"' + str.replace(/\"/g, '\"\"').replace(/\\n/g, ' ').replace(/\\r/g, ' ') + '\"';",
							"    }",
							"    ",
							"    fullCsvContent += row.serialNumber + ',' + escapeCSV(row.requestName) + ',' + escapeCSV(row.curlCommand) + ',' + escapeCSV(row.boomiResponse) + ',' + escapeCSV(row.mulesoftResponse) + ',' + stats.totalLines + ',' + stats.matchedLines + ',' + stats.mismatchedLines + ',' + stats.exemptedLines + ',' + stats.matchPercentage + ',' + stats.status + ',' + stats.boomiStatus + ',' + stats.mulesoftStatus + ',' + stats.timestamp + '\\n';",
							"}",
							"",
							"let summaryCsvContent = 'Serial,Request,Total,Matched,Mismatched,Exempted,Match %,Status,Timestamp\\n';",
							"",
							"for (let i = 0; i < reportData.length; i++) {",
							"    const row = reportData[i];",
							"    const stats = row.statistics;",
							"    summaryCsvContent += row.serialNumber + ',\"' + row.requestName.replace(/\"/g, '\"\"') + '\",' + stats.totalLines + ',' + stats.matchedLines + ',' + stats.mismatchedLines + ',' + stats.exemptedLines + ',' + stats.matchPercentage + ',' + stats.status + ',' + stats.timestamp + '\\n';",
							"}",
							"",
							"let totalRequests = reportData.length;",
							"let passedRequests = 0;",
							"let failedRequests = 0;",
							"let totalMatchPercentage = 0;",
							"",
							"for (let i = 0; i < reportData.length; i++) {",
							"    const stats = reportData[i].statistics;",
							"    if (stats.status === 'PASSED') {",
							"        passedRequests++;",
							"    } else {",
							"        failedRequests++;",
							"    }",
							"    totalMatchPercentage += parseFloat(stats.matchPercentage);",
							"}",
							"",
							"const avgMatchPercentage = totalRequests > 0 ? Math.round(totalMatchPercentage / totalRequests) : 0;",
							"",
							"let tableRows = '';",
							"for (let i = 0; i < reportData.length; i++) {",
							"    const row = reportData[i];",
							"    const stats = row.statistics;",
							"    const statusClass = stats.status === 'PASSED' ? 'pass' : 'fail';",
							"    tableRows += '<tr><td>' + row.serialNumber + '</td><td><strong>' + row.requestName + '</strong></td><td>' + stats.totalLines + '</td><td>' + stats.matchedLines + '</td><td>' + stats.mismatchedLines + '</td><td>' + stats.exemptedLines + '</td><td>' + stats.matchPercentage + '%</td><td class=\"' + statusClass + '\"><div class=\"status-badge\">' + stats.status + '</div></td></tr>';",
							"}",
							"",
							"const html = '<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><style>*{margin:0;padding:0;box-sizing:border-box}body{font-family:Arial,sans-serif;font-size:12px;padding:15px;background:#f5f5f5}.header{background:linear-gradient(135deg,#2c3e50,#34495e);color:#fff;padding:20px;border-radius:4px;margin-bottom:15px}.header h1{font-size:18px;margin-bottom:8px}.header-subtitle{font-size:11px;opacity:0.9}.summary-cards{display:grid;grid-template-columns:repeat(4,1fr);gap:10px;margin-bottom:15px}.card{background:#fff;padding:15px;border-radius:4px;text-align:center;box-shadow:0 1px 3px rgba(0,0,0,0.1)}.card-value{font-size:24px;font-weight:bold;margin-bottom:5px}.card.pass .card-value{color:#27ae60}.card.fail .card-value{color:#c0392b}.card.avg .card-value{color:#3498db}.card-label{font-size:10px;color:#7f8c8d}.export-section{background:#fff;padding:15px;border-radius:4px;margin-bottom:15px;box-shadow:0 1px 3px rgba(0,0,0,0.1)}.export-title{font-weight:bold;font-size:11px;margin-bottom:10px;color:#333}.export-buttons{display:flex;gap:10px}.export-btn{background:#3498db;color:#fff;border:none;padding:8px 16px;border-radius:3px;cursor:pointer;font-size:11px;font-weight:500}.export-btn:hover{background:#2980b9}.export-btn.secondary{background:#95a5a6}.export-btn.secondary:hover{background:#7f8c8d}.export-msg{display:none;margin-top:8px;padding:8px;background:#d4edda;color:#155724;border-radius:3px;font-size:11px}.table-container{background:#fff;border-radius:4px;overflow:auto;max-height:60vh;box-shadow:0 1px 3px rgba(0,0,0,0.1)}table{width:100%;border-collapse:collapse;font-size:11px}thead{position:sticky;top:0;background:#34495e;color:#fff;z-index:10}th{padding:10px 8px;text-align:left;font-weight:600;font-size:10px;border-right:1px solid #2c3e50}th:first-child{width:40px;text-align:center}td{padding:10px 8px;border-bottom:1px solid #ecf0f1;border-right:1px solid #ecf0f1;font-size:11px}td:first-child{text-align:center;font-weight:bold;background:#f8f9fa}tr:hover{background:#f8f9fa}.status-badge{display:inline-block;padding:4px 8px;border-radius:3px;font-weight:bold;font-size:10px}td.pass .status-badge{background:#d4edda;color:#155724}td.fail .status-badge{background:#f8d7da;color:#721c24}.signature{text-align:right;margin-top:10px;font-size:9px;color:#95a5a6;font-style:italic}</style></head><body><div class=\"header\"><h1>Migration Test Report</h1><div class=\"header-subtitle\">Generated ' + new Date().toLocaleString() + '</div></div><div class=\"summary-cards\"><div class=\"card\"><div class=\"card-value\">' + totalRequests + '</div><div class=\"card-label\">Total</div></div><div class=\"card pass\"><div class=\"card-value\">' + passedRequests + '</div><div class=\"card-label\">Passed</div></div><div class=\"card fail\"><div class=\"card-value\">' + failedRequests + '</div><div class=\"card-label\">Failed</div></div><div class=\"card avg\"><div class=\"card-value\">' + avgMatchPercentage + '%</div><div class=\"card-label\">Avg Match</div></div></div><div class=\"export-section\"><div class=\"export-title\">Export CSV Reports</div><div class=\"export-buttons\"><button class=\"export-btn\" onclick=\"copyFull()\">Copy Full CSV</button><button class=\"export-btn secondary\" onclick=\"copySummary()\">Copy Summary CSV</button></div><div id=\"msg\" class=\"export-msg\">CSV copied to clipboard</div></div><div class=\"table-container\"><table><thead><tr><th>No</th><th>Request</th><th>Total</th><th>Matched</th><th>Mismatched</th><th>Exempted</th><th>Match %</th><th>Status</th></tr></thead><tbody>' + tableRows + '</tbody></table></div><div class=\"signature\">S. 2025</div><textarea id=\"fullCsv\" style=\"position:absolute;left:-9999px\">' + fullCsvContent.replace(/</g, '&lt;').replace(/>/g, '&gt;') + '</textarea><textarea id=\"summaryCsv\" style=\"position:absolute;left:-9999px\">' + summaryCsvContent.replace(/</g, '&lt;').replace(/>/g, '&gt;') + '</textarea><script>function copyFull(){var t=document.getElementById(\"fullCsv\");t.select();document.execCommand(\"copy\");showMsg()}function copySummary(){var t=document.getElementById(\"summaryCsv\");t.select();document.execCommand(\"copy\");showMsg()}function showMsg(){var e=document.getElementById(\"msg\");e.style.display=\"block\";setTimeout(function(){e.style.display=\"none\"},2000)}</script></body></html>';",
							"",
							"pm.visualizer.set(html);",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"// This now properly exits early for [SETUP] and [REPORT] requests",
					"if (pm.info.requestName.startsWith(\"_\") || pm.info.requestName.startsWith(\"[\")) {",
					"    console.log(\"Skipping utility request: \" + pm.info.requestName);",
					"    return; // Exits immediately, doesn't run any comparison logic",
					"}",
					"",
					"const requestCounter = pm.collectionVariables.get(\"report_request_count\");",
					"if (!requestCounter || requestCounter === \"0\") {",
					"    pm.collectionVariables.set(\"report_request_count\", \"0\");",
					"}",
					"",
					"const currentCount = parseInt(pm.collectionVariables.get(\"report_request_count\") || \"0\") + 1;",
					"pm.collectionVariables.set(\"report_request_count\", currentCount.toString());",
					"pm.collectionVariables.set(\"current_report_index\", currentCount.toString());",
					"",
					"console.log(\"Processing request #\" + currentCount + \": \" + pm.info.requestName);",
					"",
					"const muleBaseUrl = pm.collectionVariables.get(\"mule_base_url\");",
					"const boomiBaseUrl = pm.collectionVariables.get(\"boomi_base_url\");",
					"",
					"if (!muleBaseUrl || !boomiBaseUrl) {",
					"    console.error(\"Missing base URLs in collection variables\");",
					"    return;",
					"}",
					"",
					"const currentRequest = pm.request;",
					"const method = currentRequest.method;",
					"const requestUrl = pm.request.url;",
					"",
					"function transformMuleUrlToBoomi(requestUrl, muleBase, boomiBase) {",
					"    try {",
					"        const fullUrl = requestUrl.toString();",
					"        let pathAfterBase = fullUrl.replace(muleBase, '');",
					"        if (pathAfterBase.startsWith('/')) {",
					"            pathAfterBase = pathAfterBase.substring(1);",
					"        }",
					"        const urlParts = pathAfterBase.split('?');",
					"        const pathPart = urlParts[0];",
					"        const queryPart = urlParts.length > 1 ? '?' + urlParts[1] : '';",
					"        const pathSegments = pathPart.split('/').filter(s => s.length > 0);",
					"        if (pathSegments.length > 0 && pathSegments[0] !== 'ws') {",
					"            pathSegments.shift();",
					"        }",
					"        const cleanBoomiBase = boomiBase.replace(/\\/$/, '');",
					"        const transformedPath = pathSegments.join('/');",
					"        return cleanBoomiBase + '/' + transformedPath + queryPart;",
					"    } catch (error) {",
					"        console.error(\"URL transformation failed:\", error);",
					"        return null;",
					"    }",
					"}",
					"",
					"const boomiUrl = transformMuleUrlToBoomi(requestUrl, muleBaseUrl, boomiBaseUrl);",
					"",
					"if (!boomiUrl) {",
					"    console.error(\"Failed to generate Boomi URL\");",
					"    return;",
					"}",
					"",
					"const headers = {};",
					"const excludedHeaders = ['host', 'content-length', 'connection', 'user-agent', 'postman-token'];",
					"",
					"currentRequest.headers.each((header) => {",
					"    const headerKey = header.key.toLowerCase();",
					"    if (!header.disabled && !excludedHeaders.includes(headerKey)) {",
					"        headers[header.key] = header.value;",
					"    }",
					"});",
					"",
					"let requestBody = null;",
					"let bodyMode = null;",
					"",
					"if (currentRequest.body && ['POST', 'PUT', 'PATCH', 'DELETE'].includes(method)) {",
					"    bodyMode = currentRequest.body.mode;",
					"    switch(bodyMode) {",
					"        case 'raw':",
					"            requestBody = currentRequest.body.raw;",
					"            break;",
					"        case 'formdata':",
					"            const formData = {};",
					"            currentRequest.body.formdata.each((item) => {",
					"                if (!item.disabled) {",
					"                    formData[item.key] = item.value;",
					"                }",
					"            });",
					"            requestBody = formData;",
					"            break;",
					"        case 'urlencoded':",
					"            const urlencodedData = {};",
					"            currentRequest.body.urlencoded.each((item) => {",
					"                if (!item.disabled) {",
					"                    urlencodedData[item.key] = item.value;",
					"                }",
					"            });",
					"            requestBody = urlencodedData;",
					"            break;",
					"        case 'graphql':",
					"            requestBody = JSON.stringify({",
					"                query: currentRequest.body.graphql.query,",
					"                variables: currentRequest.body.graphql.variables",
					"            });",
					"            break;",
					"    }",
					"}",
					"",
					"if (requestBody && method !== 'GET') {",
					"    const existingContentType = headers['Content-Type'] || headers['content-type'];",
					"    if (!existingContentType && bodyMode === 'raw') {",
					"        const trimmedBody = requestBody.trim();",
					"        if (trimmedBody.startsWith('{') || trimmedBody.startsWith('[')) {",
					"            headers['Content-Type'] = 'application/json';",
					"        } else if (trimmedBody.startsWith('<')) {",
					"            headers['Content-Type'] = 'application/xml';",
					"        }",
					"    }",
					"}",
					"",
					"const authType = pm.collectionVariables.get(\"boomi_auth_type\") || \"same\";",
					"",
					"if (authType !== \"same\") {",
					"    if (authType === \"basic\") {",
					"        const boomiUsername = pm.collectionVariables.get(\"boomi_username\");",
					"        const boomiPassword = pm.collectionVariables.get(\"boomi_password\");",
					"        if (boomiUsername && boomiPassword) {",
					"            headers['Authorization'] = 'Basic ' + btoa(boomiUsername + \":\" + boomiPassword);",
					"        }",
					"    } else if (authType === \"bearer\") {",
					"        const boomiToken = pm.collectionVariables.get(\"boomi_bearer_token\");",
					"        if (boomiToken) {",
					"            headers['Authorization'] = 'Bearer ' + boomiToken;",
					"        }",
					"    } else if (authType === \"api-key\") {",
					"        const boomiApiKey = pm.collectionVariables.get(\"boomi_api_key\");",
					"        const boomiApiKeyHeader = pm.collectionVariables.get(\"boomi_api_key_header\") || \"X-API-Key\";",
					"        if (boomiApiKey) {",
					"            headers[boomiApiKeyHeader] = boomiApiKey;",
					"        }",
					"    }",
					"}",
					"",
					"const boomiRequest = {",
					"    url: boomiUrl,",
					"    method: method,",
					"    header: headers",
					"};",
					"",
					"if (requestBody) {",
					"    if (bodyMode === 'raw') {",
					"        boomiRequest.body = { mode: 'raw', raw: requestBody };",
					"    } else if (bodyMode === 'formdata') {",
					"        boomiRequest.body = { mode: 'formdata', formdata: requestBody };",
					"    } else if (bodyMode === 'urlencoded') {",
					"        boomiRequest.body = { mode: 'urlencoded', urlencoded: requestBody };",
					"    } else {",
					"        boomiRequest.body = { mode: 'raw', raw: typeof requestBody === 'string' ? requestBody : JSON.stringify(requestBody) };",
					"    }",
					"}",
					"",
					"let curlCommand = 'curl -X ' + method + ' \"' + requestUrl.toString() + '\"';",
					"currentRequest.headers.each((header) => {",
					"    if (!header.disabled) {",
					"        curlCommand += ' -H \"' + header.key + ': ' + header.value + '\"';",
					"    }",
					"});",
					"if (requestBody && bodyMode === 'raw') {",
					"    const bodyEscaped = requestBody.replace(/\"/g, '\\\\\"').substring(0, 500);",
					"    curlCommand += ' -d \"' + bodyEscaped + '...\"';",
					"}",
					"",
					"pm.collectionVariables.set(\"temp_request_name\", pm.info.requestName);",
					"pm.collectionVariables.set(\"temp_request_curl\", curlCommand);",
					"",
					"console.log(\"Calling Boomi API...\");",
					"",
					"pm.sendRequest(boomiRequest, (err, response) => {",
					"    if (err) {",
					"        console.error(\"Boomi request failed:\", err.message);",
					"        pm.collectionVariables.set(\"boomi_response\", \"ERROR: \" + err.message);",
					"        pm.collectionVariables.set(\"boomi_status\", 0);",
					"    } else {",
					"        pm.collectionVariables.set(\"boomi_response\", response.text());",
					"        pm.collectionVariables.set(\"boomi_status\", response.code);",
					"        console.log(\"Boomi response received: \" + response.code);",
					"    }",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"if (pm.info.requestName.startsWith(\"_\") || pm.info.requestName.startsWith(\"[\")) {",
					"    return;",
					"}",
					"",
					"// Check if running in Collection Runner",
					"const isCollectionRunner = pm.info.iterationCount > 1;",
					"const isIndividualExecution = !isCollectionRunner;",
					"",
					"if (isIndividualExecution) {",
					"    console.log(\"Individual execution mode - will show detailed comparison\");",
					"} else {",
					"    console.log(\"Collection Runner mode - silent execution\");",
					"}",
					"",
					"let attempts = 0;",
					"const maxAttempts = 20;",
					"const pollInterval = 500;",
					"",
					"function waitForBoomiResponse() {",
					"    attempts++;",
					"    const boomiResponse = pm.collectionVariables.get(\"boomi_response\");",
					"    ",
					"    if (boomiResponse && boomiResponse !== \"\" && boomiResponse !== \"undefined\" && boomiResponse !== null) {",
					"        executeComparison();",
					"    } else if (attempts >= maxAttempts) {",
					"        console.error(\"Boomi response timeout\");",
					"        pm.test(\"Boomi response received\", function() {",
					"            pm.expect.fail(\"Timeout waiting for Boomi response\");",
					"        });",
					"        ",
					"        // Show timeout message in visualizer for individual execution",
					"        if (isIndividualExecution) {",
					"            const errorHtml = '<div style=\"padding:40px;text-align:center;font-family:Arial;background:#fff3cd;border-radius:4px\"><h2 style=\"color:#856404\">Timeout</h2><p>Boomi response not received within 10 seconds</p></div>';",
					"            pm.visualizer.set(errorHtml);",
					"        }",
					"    } else {",
					"        setTimeout(waitForBoomiResponse, pollInterval);",
					"    }",
					"}",
					"",
					"waitForBoomiResponse();",
					"",
					"function executeComparison() {",
					"    const boomiResponseRaw = pm.collectionVariables.get(\"boomi_response\");",
					"    const boomiStatus = pm.collectionVariables.get(\"boomi_status\");",
					"    const mulesoftResponseRaw = pm.response.text();",
					"    const reportIndex = pm.collectionVariables.get(\"current_report_index\");",
					"    const requestName = pm.collectionVariables.get(\"temp_request_name\") || pm.info.requestName;",
					"    const curlCommand = pm.collectionVariables.get(\"temp_request_curl\") || \"\";",
					"",
					"    if (!boomiResponseRaw || boomiResponseRaw === \"\") {",
					"        console.error(\"Boomi response empty\");",
					"        if (isIndividualExecution) {",
					"            const errorHtml = '<div style=\"padding:40px;text-align:center;font-family:Arial;background:#f8d7da;border-radius:4px\"><h2 style=\"color:#721c24\">Empty Response</h2><p>Boomi response is empty</p></div>';",
					"            pm.visualizer.set(errorHtml);",
					"        }",
					"        return;",
					"    }",
					"    ",
					"    if (boomiResponseRaw.startsWith(\"ERROR:\")) {",
					"        console.error(\"Boomi API error\");",
					"        if (isIndividualExecution) {",
					"            const errorHtml = '<div style=\"padding:40px;text-align:center;font-family:Arial;background:#f8d7da;border-radius:4px\"><h2 style=\"color:#721c24\">Boomi Error</h2><p>' + boomiResponseRaw.replace('ERROR: ', '') + '</p></div>';",
					"            pm.visualizer.set(errorHtml);",
					"        }",
					"        return;",
					"    }",
					"",
					"    const exemptedFieldsStr = pm.collectionVariables.get(\"exempted_fields\");",
					"    const exemptedFields = exemptedFieldsStr ? JSON.parse(exemptedFieldsStr) : [];",
					"",
					"    function formatResponse(responseText) {",
					"        const trimmed = responseText.trim();",
					"        if (trimmed.startsWith('{') || trimmed.startsWith('[')) {",
					"            try {",
					"                return JSON.stringify(JSON.parse(trimmed), null, 2);",
					"            } catch (e) {",
					"                return responseText;",
					"            }",
					"        }",
					"        return responseText;",
					"    }",
					"",
					"    const boomiResponse = formatResponse(boomiResponseRaw);",
					"    const mulesoftResponse = formatResponse(mulesoftResponseRaw);",
					"",
					"    function lineContainsExemptedField(line, exemptedFields) {",
					"        for (let i = 0; i < exemptedFields.length; i++) {",
					"            if (line.includes('\"' + exemptedFields[i] + '\"') || line.includes('<' + exemptedFields[i] + '>')) {",
					"                return true;",
					"            }",
					"        }",
					"        return false;",
					"    }",
					"",
					"    function splitIntoLines(text) {",
					"        return text ? text.split(/\\r?\\n/) : [];",
					"    }",
					"",
					"    const boomiLines = splitIntoLines(boomiResponse);",
					"    const mulesoftLines = splitIntoLines(mulesoftResponse);",
					"",
					"    function compareLineByLine(lines1, lines2, exemptedFields) {",
					"        const maxLines = Math.max(lines1.length, lines2.length);",
					"        const comparisonResults = [];",
					"        let mismatchCount = 0;",
					"        let exemptedCount = 0;",
					"        ",
					"        for (let i = 0; i < maxLines; i++) {",
					"            const boomiLine = lines1[i] !== undefined ? lines1[i] : '';",
					"            const mulesoftLine = lines2[i] !== undefined ? lines2[i] : '';",
					"            const isMatch = boomiLine === mulesoftLine;",
					"            const isExempted = lineContainsExemptedField(boomiLine, exemptedFields) || lineContainsExemptedField(mulesoftLine, exemptedFields);",
					"            ",
					"            let status = 'match';",
					"            if (isExempted) {",
					"                status = 'exempted';",
					"                exemptedCount++;",
					"            } else if (!isMatch) {",
					"                status = 'mismatch';",
					"                mismatchCount++;",
					"            }",
					"            ",
					"            comparisonResults.push({",
					"                lineNumber: i + 1,",
					"                boomiLine: boomiLine,",
					"                mulesoftLine: mulesoftLine,",
					"                status: status",
					"            });",
					"        }",
					"        ",
					"        return {",
					"            results: comparisonResults,",
					"            totalMismatches: mismatchCount,",
					"            totalExempted: exemptedCount,",
					"            totalLines: maxLines",
					"        };",
					"    }",
					"",
					"    const comparison = compareLineByLine(boomiLines, mulesoftLines, exemptedFields);",
					"",
					"    console.log(\"Comparison: \" + comparison.totalMismatches + \" mismatches, \" + comparison.totalExempted + \" exempted\");",
					"",
					"    pm.test(\"Boomi API responded\", function() {",
					"        pm.expect(boomiStatus).to.be.oneOf([200, 201, 202, 204]);",
					"    });",
					"",
					"    pm.test(\"MuleSoft API responded\", function() {",
					"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
					"    });",
					"",
					"    pm.test(\"Line counts match\", function() {",
					"        pm.expect(boomiLines.length).to.equal(mulesoftLines.length);",
					"    });",
					"",
					"    pm.test(\"All non-exempted lines match\", function() {",
					"        pm.expect(comparison.totalMismatches).to.equal(0);",
					"    });",
					"",
					"    const matchPercentage = comparison.totalLines > 0 ? Math.round(((comparison.totalLines - comparison.totalMismatches - comparison.totalExempted) / comparison.totalLines) * 100) : 100;",
					"    const statusText = comparison.totalMismatches > 0 ? 'FAILED' : 'PASSED';",
					"",
					"    function minifyResponse(responseText) {",
					"        if (!responseText) return \"\";",
					"        try {",
					"            return JSON.stringify(JSON.parse(responseText.trim()));",
					"        } catch (e) {",
					"            return responseText.trim().substring(0, 1000);",
					"        }",
					"    }",
					"",
					"    const statsObj = {",
					"        totalLines: comparison.totalLines,",
					"        matchedLines: comparison.totalLines - comparison.totalMismatches - comparison.totalExempted,",
					"        mismatchedLines: comparison.totalMismatches,",
					"        exemptedLines: comparison.totalExempted,",
					"        matchPercentage: matchPercentage,",
					"        status: statusText,",
					"        boomiStatus: boomiStatus,",
					"        mulesoftStatus: pm.response.code,",
					"        timestamp: new Date().toISOString()",
					"    };",
					"",
					"    const reportEntry = {",
					"        serialNumber: parseInt(reportIndex),",
					"        requestName: requestName,",
					"        curlCommand: curlCommand,",
					"        boomiResponse: minifyResponse(boomiResponseRaw),",
					"        mulesoftResponse: minifyResponse(mulesoftResponseRaw),",
					"        statistics: statsObj",
					"    };",
					"",
					"    const paddedIndex = reportIndex.padStart(3, '0');",
					"    pm.collectionVariables.set(\"report_data_\" + paddedIndex, JSON.stringify(reportEntry));",
					"",
					"    pm.collectionVariables.set(\"temp_request_name\", \"\");",
					"    pm.collectionVariables.set(\"temp_request_curl\", \"\");",
					"",
					"    // Show visualizer ONLY for individual execution",
					"    if (isIndividualExecution) {",
					"        console.log(\"Rendering visualizer with \" + comparison.results.length + \" lines\");",
					"        ",
					"        let tableRows = '';",
					"        for (let i = 0; i < comparison.results.length; i++) {",
					"            const row = comparison.results[i];",
					"            const rowClass = row.status === 'exempted' ? 'exempted' : (row.status === 'mismatch' ? 'mismatch' : 'match');",
					"            const boomiText = row.boomiLine || '<span class=\"empty\">(empty)</span>';",
					"            const mulesoftText = row.mulesoftLine || '<span class=\"empty\">(empty)</span>';",
					"            tableRows += '<tr class=\"' + rowClass + '\"><td>' + row.lineNumber + '</td><td>' + boomiText + '</td><td>' + mulesoftText + '</td></tr>';",
					"        }",
					"        ",
					"        const headerBg = comparison.totalMismatches > 0 ? '#c0392b' : '#27ae60';",
					"        ",
					"        const html = '<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><style>*{margin:0;padding:0;box-sizing:border-box}body{font-family:Arial,sans-serif;font-size:12px;padding:15px;background:#f5f5f5}.header{background:' + headerBg + ';color:#fff;padding:15px;border-radius:4px;margin-bottom:15px}.header h2{font-size:16px;margin-bottom:8px}.stats{display:flex;gap:20px;font-size:11px;flex-wrap:wrap}.stats div{display:flex;align-items:center;gap:5px}.stats .label{opacity:0.9}.stats .value{font-weight:bold;font-size:13px}.legend{background:#fff;padding:12px;border-radius:4px;margin-bottom:15px;display:flex;gap:15px;align-items:center;font-size:11px;box-shadow:0 1px 3px rgba(0,0,0,0.1)}.legend-title{font-weight:bold;color:#333}.legend-item{display:flex;align-items:center;gap:6px}.legend-box{width:20px;height:14px;border:1px solid #ddd;border-radius:2px}.legend-box.match{background:#fff}.legend-box.mismatch{background:#ffebee}.legend-box.exempted{background:#fff3cd}.table-container{background:#fff;border-radius:4px;overflow:auto;max-height:70vh;box-shadow:0 1px 3px rgba(0,0,0,0.1)}table{width:100%;border-collapse:collapse;font-size:11px}thead{position:sticky;top:0;background:#34495e;color:#fff;z-index:10}th{padding:10px 8px;text-align:left;font-weight:600;font-size:10px;border-right:1px solid #2c3e50}th:first-child{width:50px;text-align:center}td{padding:8px;border-bottom:1px solid #ecf0f1;border-right:1px solid #ecf0f1;font-family:Consolas,monospace;font-size:11px;vertical-align:top;word-break:break-all}td:first-child{text-align:center;font-weight:bold;background:#f8f9fa;font-family:Arial,sans-serif}tr.match{background:#fff}tr.mismatch{background:#ffebee}tr.mismatch td:first-child{background:#ffcdd2;color:#c0392b}tr.exempted{background:#fff3cd}tr.exempted td:first-child{background:#ffecb3;color:#f57c00}tr:hover td{opacity:0.9}.empty{color:#95a5a6;font-style:italic}.signature{text-align:right;margin-top:10px;font-size:9px;color:#95a5a6;font-style:italic}</style></head><body><div class=\"header\"><h2>Response Comparison: ' + requestName + '</h2><div class=\"stats\"><div><span class=\"label\">Lines:</span><span class=\"value\">' + comparison.totalLines + '</span></div><div><span class=\"label\">Mismatched:</span><span class=\"value\">' + comparison.totalMismatches + '</span></div><div><span class=\"label\">Exempted:</span><span class=\"value\">' + comparison.totalExempted + '</span></div><div><span class=\"label\">Match:</span><span class=\"value\">' + matchPercentage + '%</span></div><div><span class=\"label\">Status:</span><span class=\"value\">' + statusText + '</span></div></div></div><div class=\"legend\"><span class=\"legend-title\">Legend:</span><div class=\"legend-item\"><div class=\"legend-box match\"></div><span>Match</span></div><div class=\"legend-item\"><div class=\"legend-box mismatch\"></div><span>Mismatch</span></div><div class=\"legend-item\"><div class=\"legend-box exempted\"></div><span>Exempted</span></div></div><div class=\"table-container\"><table><thead><tr><th>Line</th><th>Boomi Response</th><th>MuleSoft Response</th></tr></thead><tbody>' + tableRows + '</tbody></table></div><div class=\"signature\">S. 2025</div></body></html>';",
					"        ",
					"        pm.visualizer.set(html);",
					"        console.log(\"Visualizer set successfully\");",
					"    } else {",
					"        console.log(\"Collection Runner - skipping visualizer\");",
					"    }",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mule_base_url",
			"value": ""
		},
		{
			"key": "boomi_base_url",
			"value": ""
		},
		{
			"key": "exempted_fields",
			"value": ""
		},
		{
			"key": "report_request_count",
			"value": ""
		},
		{
			"key": "current_report_index",
			"value": ""
		},
		{
			"key": "temp_request_name",
			"value": ""
		},
		{
			"key": "temp_request_curl",
			"value": ""
		},
		{
			"key": "boomi_response",
			"value": ""
		},
		{
			"key": "boomi_status",
			"value": ""
		},
		{
			"key": "report_data_001",
			"value": ""
		},
		{
			"key": "report_data_002",
			"value": ""
		}
	]
}