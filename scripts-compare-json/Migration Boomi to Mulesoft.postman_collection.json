{
	"info": {
		"_postman_id": "76b1439f-5bbd-4066-9d6d-cde3b95e117f",
		"name": "Migration Boomi to Mulesoft",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41089880"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Get Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://0.0.0.0:8000/app/ws/rest/users/:userId",
							"protocol": "http",
							"host": [
								"0",
								"0",
								"0",
								"0"
							],
							"port": "8000",
							"path": [
								"app",
								"ws",
								"rest",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "devsha256"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Large payload]",
			"item": [],
			"description": "This sub-folder sends script a flag to omit the large resposne payload from the final CSV Report.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							"// Flag to skip logging large payloads",
							"pm.collectionVariables.set(\"skip_payload_logging\", \"true\");",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							"// Unset Flag to skip logging large payloads",
							"pm.collectionVariables.unset(\"skip_payload_logging\");",
							""
						]
					}
				}
			]
		},
		{
			"name": "[SETUP] Clear Previous Reports",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This function gets all active collection variables and returns them as a key-value object.",
							"const getActiveVariables = () => {",
							"    // pm.collectionVariables.values is a property that returns an array of variable objects.",
							"    const allVarsArray = pm.collectionVariables.values; ",
							"    return allVarsArray.reduce((vars, variable) => {",
							"        vars[variable.key] = variable.value;",
							"        return vars;",
							"    }, {});",
							"};",
							"",
							"// Generates an HTML list from an array of variables.",
							"const generateVariableList = (vars) => {",
							"    if (!vars || vars.length === 0) {",
							"        return '<li>No variables were preserved.</li>';",
							"    }",
							"    return vars.map(v => `<li>${v}</li>`).join('');",
							"};",
							"",
							"// Defines the CSS for the visualizer.",
							"const getCSS = () => `",
							"    :root {",
							"        --md-sys-color-primary: #6750A4;",
							"        --md-sys-color-surface: #FFFFFF;",
							"        --md-sys-color-surface-variant: #F0F0F0;",
							"        --md-sys-color-on-surface: #1C1B1F;",
							"        --md-sys-color-on-surface-variant: #49454F;",
							"        --md-sys-color-outline: #CCCCCC;",
							"        --border-radius: 12px;",
							"        --spacing-small: 8px;",
							"        --spacing-medium: 16px;",
							"        --spacing-large: 24px;",
							"    }",
							"",
							"    body {",
							"        background-color: var(--md-sys-color-surface);",
							"        font-family: 'Roboto', Arial, sans-serif;",
							"        font-size: 14px;",
							"        color: var(--md-sys-color-on-surface);",
							"        padding: var(--spacing-large);",
							"        margin: 0;",
							"        box-sizing: border-box;",
							"        display: flex;",
							"        justify-content: center;",
							"        align-items: center;",
							"        min-height: 100vh;",
							"        text-align: center;",
							"    }",
							"",
							"    .container {",
							"        max-width: 560px;",
							"        width: 100%;",
							"        padding: var(--spacing-large);",
							"        background: transparent;",
							"        box-shadow: none;",
							"    }",
							"",
							"    h2 {",
							"        color: var(--md-sys-color-primary);",
							"        font-size: 22px;",
							"        font-weight: 500;",
							"        margin-bottom: var(--spacing-medium);",
							"    }",
							"",
							"    .stats, .preserved {",
							"        background-color: var(--md-sys-color-surface-variant);",
							"        padding: var(--spacing-medium);",
							"        border-radius: var(--border-radius);",
							"        color: var(--md-sys-color-on-surface-variant);",
							"        margin-top: var(--spacing-medium);",
							"    }",
							"",
							"    .stats p {",
							"        margin: var(--spacing-small) 0;",
							"    }",
							"",
							"    .preserved {",
							"        text-align: left;",
							"        max-height: 250px;",
							"        overflow-y: auto;",
							"    }",
							"",
							"    .preserved h3 {",
							"        font-size: 16px;",
							"        font-weight: 500;",
							"        margin-bottom: var(--spacing-medium);",
							"        color: var(--md-sys-color-on-surface-variant);",
							"    }",
							"",
							"    .preserved ul {",
							"        list-style: none;",
							"        padding: 0;",
							"    }",
							"",
							"    .preserved li {",
							"        padding: 8px;",
							"        border-bottom: 1px solid var(--md-sys-color-outline);",
							"        font-size: 13px;",
							"    }",
							"",
							"    .preserved li:last-child {",
							"        border-bottom: none;",
							"    }",
							"",
							"    .signature {",
							"        font-size: 12px;",
							"        color: var(--md-sys-color-on-surface-variant);",
							"        font-style: italic;",
							"        margin-top: var(--spacing-large);",
							"    }",
							"    ",
							"    svg#bubble-animation {",
							"        width: 100%;",
							"        height: 180px;",
							"        margin-top: var(--spacing-medium);",
							"        background-color: var(--md-sys-color-surface-variant);",
							"        border-radius: var(--border-radius);",
							"    }",
							"`;",
							"",
							"// Generates the complete HTML for the visualizer.",
							"const generateHTML = (clearedReports, clearedTemp, preservedVars) => {",
							"    const varList = generateVariableList(preservedVars);",
							"    const style = getCSS();",
							"    ",
							"    return `<!DOCTYPE html>",
							"    <html lang=\"en\">",
							"    <head>",
							"        <meta charset=\"UTF-8\">",
							"        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
							"        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">",
							"        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>",
							"        <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap\" rel=\"stylesheet\">",
							"        <style>${style}</style>",
							"        <script src=\"https://d3js.org/d3.v7.min.js\"></script>",
							"        <title>Setup Complete</title>",
							"    </head>",
							"    <body>",
							"        <div class=\"container\">",
							"            <h2>Setup Complete</h2>",
							"            <svg id=\"bubble-animation\"></svg>",
							"            <div class=\"stats\">",
							"                <p>Cleared <strong>${clearedReports}</strong> previous report entries.</p>",
							"                <p>Cleared <strong>${clearedTemp}</strong> temporary variables.</p>",
							"            </div>",
							"            <div class=\"preserved\">",
							"                <h3>Preserved Variables (${preservedVars.length})</h3>",
							"                <ul>${varList}</ul>",
							"            </div>",
							"            <div class=\"signature\">S. 2025</div>",
							"        </div>",
							"",
							"        <script>",
							"            const svg = d3.select('#bubble-animation');",
							"            const width = svg.node().getBoundingClientRect().width;",
							"            const height = svg.node().getBoundingClientRect().height;",
							"            const centerX = width / 2;",
							"            const centerY = height / 2;",
							"",
							"            const numBubbles = Math.min(${clearedTemp}, 20); // Cap at 20 bubbles for performance",
							"",
							"            if (numBubbles > 0) {",
							"                const bubbles = d3.range(numBubbles).map(() => ({}));",
							"",
							"                const bubbleElements = svg.selectAll('circle')",
							"                    .data(bubbles)",
							"                    .join('circle')",
							"                    .attr('cx', centerX)",
							"                    .attr('cy', centerY)",
							"                    .attr('r', 0)",
							"                    .attr('fill', 'var(--md-sys-color-primary)')",
							"                    .style('opacity', 0.7);",
							"",
							"                function animate(selection) {",
							"                    selection.transition()",
							"                        .delay((d, i) => i * 200) // Stagger the start of each bubble",
							"                        .duration(3000)",
							"                        .attr('r', Math.min(width, height) / 2)",
							"                        .style('opacity', 0)",
							"                        .on('end', function() {",
							"                            // Reset the bubble to start again",
							"                            d3.select(this)",
							"                                .attr('r', 0)",
							"                                .style('opacity', 0.7);",
							"                            animate(d3.select(this)); // Restart the animation for this bubble",
							"                        });",
							"                }",
							"                ",
							"                animate(bubbleElements);",
							"            }",
							"        </script>",
							"    </body>",
							"    </html>`;",
							"};",
							"",
							"// --- Main Execution ---",
							"const activeVars = getActiveVariables();",
							"const previousCount = parseInt(activeVars[\"report_request_count\"] || \"0\");",
							"",
							"let userPreservedVars = [];",
							"if (activeVars[\"variables\"]) {",
							"    try {",
							"        userPreservedVars = JSON.parse(activeVars[\"variables\"]);",
							"    } catch (e) {",
							"        console.error(\"Could not parse 'variables'. Please ensure it's a valid JSON array.\");",
							"    }",
							"}",
							"",
							"const systemVars = [",
							"    \"mule_base_url\", \"boomi_base_url\", \"exempted_fields\", \"boomi_auth_type\",",
							"    \"boomi_username\", \"boomi_password\", \"boomi_bearer_token\", \"boomi_api_key\",",
							"    \"boomi_api_key_header\", \"variables\"",
							"];",
							"",
							"const allPreservedKeys = [...new Set(systemVars.concat(userPreservedVars))];",
							"const finalPreservedVars = allPreservedKeys.filter(key => activeVars.hasOwnProperty(key));",
							"",
							"// Clear reports",
							"let clearedReports = 0;",
							"for (let i = 1; i <= previousCount; i++) {",
							"    const varName = \"report_data_\" + i.toString().padStart(3, '0');",
							"    if (activeVars.hasOwnProperty(varName)) {",
							"        pm.collectionVariables.unset(varName);",
							"        clearedReports++;",
							"    }",
							"}",
							"",
							"// Clear temporary variables",
							"const tempVars = [",
							"    \"report_request_count\", \"current_report_index\", \"temp_request_name\",",
							"    \"temp_request_curl\", \"boomi_response\", \"boomi_status\", \"boomi_error\",",
							"    \"csv_full_report\", \"csv_summary_report\",",
							"    \"regression_mode\", \"regression_curl\", \"regression_request_name\"",
							"];",
							"",
							"let clearedTemp = 0;",
							"for (const varName of tempVars) {",
							"    if (activeVars.hasOwnProperty(varName) && !finalPreservedVars.includes(varName)) {",
							"        pm.collectionVariables.unset(varName);",
							"        clearedTemp++;",
							"    }",
							"}",
							"",
							"pm.collectionVariables.set(\"report_request_count\", \"0\");",
							"",
							"const html = generateHTML(clearedReports, clearedTemp, finalPreservedVars);",
							"pm.visualizer.set(html);",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "[REPORT] Generate Summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ========================================================================",
							"// Utility Functions",
							"// ========================================================================",
							"const getReportCount = () => ",
							"    parseInt(pm.collectionVariables.get(\"report_request_count\") || \"0\");",
							"",
							"const getReportData = (index) => {",
							"    const paddedIndex = String(index).padStart(3, '0');",
							"    return pm.collectionVariables.get(`report_data_${paddedIndex}`);",
							"};",
							"",
							"const setCollectionVar = (key, value) => ",
							"    pm.collectionVariables.set(key, value);",
							"",
							"const escapeCSV = (text) => {",
							"    if (!text && text !== 0) return '';",
							"    const str = String(text);",
							"    if (str.includes('\"') || str.includes(',') || str.includes('\\n') || str.includes('\\r')) {",
							"        return `\"${str.replace(/\"/g, '\"\"')}\"`;",
							"    }",
							"    return str;",
							"};",
							"",
							"// ========================================================================",
							"// Report Loading",
							"// ========================================================================",
							"const parseReportData = (reportData, index) => {",
							"    try {",
							"        const report = JSON.parse(reportData);",
							"        console.log(`Loaded report ${index}: ${report.requestName}`);",
							"        return report;",
							"    } catch (e) {",
							"        console.error(`Failed to parse report ${index}: ${e.message}`);",
							"        return null;",
							"    }",
							"};",
							"",
							"const loadReports = (reportCount) => {",
							"    const reports = [];",
							"    ",
							"    for (let i = 1; i <= reportCount; i++) {",
							"        const reportData = getReportData(i);",
							"        if (reportData) {",
							"            const report = parseReportData(reportData, i);",
							"            if (report) reports.push(report);",
							"        }",
							"    }",
							"    ",
							"    return reports;",
							"};",
							"",
							"// ========================================================================",
							"// CSV Generation",
							"// ========================================================================",
							"const createFullCSVRow = (report) => {",
							"    const stats = report.statistics;",
							"    return [",
							"        report.serialNumber,",
							"        escapeCSV(report.requestName),",
							"        escapeCSV(stats.status),",
							"        stats.matchPercentage,",
							"        stats.totalLines,",
							"        stats.matchedLines,",
							"        stats.mismatchedLines,",
							"        stats.exemptedLines,",
							"        escapeCSV(stats.exemptedFields || ''),",
							"        stats.boomiStatus,",
							"        stats.mulesoftStatus,",
							"        escapeCSV(stats.timestamp),",
							"        escapeCSV(report.curlCommand),",
							"        escapeCSV(report.boomiResponse),",
							"        escapeCSV(report.mulesoftResponse)",
							"    ].join(',');",
							"};",
							"",
							"const createSummaryCSVRow = (report) => {",
							"    const stats = report.statistics;",
							"    return [",
							"        report.serialNumber,",
							"        escapeCSV(report.requestName),",
							"        escapeCSV(stats.status),",
							"        stats.matchPercentage,",
							"        stats.totalLines,",
							"        stats.matchedLines,",
							"        stats.mismatchedLines,",
							"        stats.exemptedLines,",
							"        escapeCSV(stats.exemptedFields || ''),",
							"        stats.boomiStatus,",
							"        stats.mulesoftStatus,",
							"        escapeCSV(stats.timestamp)",
							"    ].join(',');",
							"};",
							"",
							"const generateFullCSV = (reports) => {",
							"    const header = 'Serial,Request Name,Status,Match %,Total Lines,Matched,Mismatched,Exempted,Exempted Fields,Boomi Status,MuleSoft Status,Timestamp,cURL Command,Boomi Response,MuleSoft Response\\n';",
							"    const rows = reports.map(createFullCSVRow).join('\\n');",
							"    return header + rows + '\\n';",
							"};",
							"",
							"const generateSummaryCSV = (reports) => {",
							"    const header = 'Serial,Request Name,Status,Match %,Total Lines,Matched,Mismatched,Exempted,Exempted Fields,Boomi Status,MuleSoft Status,Timestamp\\n';",
							"    const rows = reports.map(createSummaryCSVRow).join('\\n');",
							"    return header + rows + '\\n';",
							"};",
							"",
							"// ========================================================================",
							"// Statistics Calculation",
							"// ========================================================================",
							"const hasFailedReports = (reports) => ",
							"    reports.some(r => r.statistics.status === 'FAILED');",
							"",
							"const countPassedReports = (reports) => ",
							"    reports.filter(r => r.statistics.status === 'PASSED').length;",
							"",
							"const countFailedReports = (reports) => ",
							"    reports.filter(r => r.statistics.status === 'FAILED').length;",
							"",
							"const sumTotalLines = (reports) => ",
							"    reports.reduce((sum, r) => sum + r.statistics.totalLines, 0);",
							"",
							"const sumTotalMismatches = (reports) => ",
							"    reports.reduce((sum, r) => sum + r.statistics.mismatchedLines, 0);",
							"",
							"const calculateAvgMatchPercentage = (reports) => ",
							"    Math.round(reports.reduce((sum, r) => sum + r.statistics.matchPercentage, 0) / reports.length);",
							"",
							"const generateSummaryStats = (reports) => ({",
							"    total: reports.length,",
							"    passed: countPassedReports(reports),",
							"    failed: countFailedReports(reports),",
							"    totalLines: sumTotalLines(reports),",
							"    totalMismatches: sumTotalMismatches(reports),",
							"    avgMatchPercentage: calculateAvgMatchPercentage(reports)",
							"});",
							"",
							"// ========================================================================",
							"// HTML Generation",
							"// ========================================================================",
							"const getHeaderBackground = (reports) => ",
							"    hasFailedReports(reports) ? '#c0392b' : '#27ae60';",
							"",
							"const formatTimestamp = (timestamp) => ",
							"    new Date(timestamp).toLocaleString();",
							"",
							"",
							"const createTableRow = (report) => {",
							"    const stats = report.statistics;",
							"    const statusClass = stats.status === 'PASSED' ? 'status-passed' : 'status-failed';",
							"    return `",
							"        <tr>",
							"            <td>${report.serialNumber}</td>",
							"            <td>${report.requestName}</td>",
							"            <td><span class=\"status-badge ${statusClass}\">${stats.status}</span></td>",
							"            <td>${stats.matchPercentage}%</td>",
							"            <td>${stats.totalLines}</td>",
							"            <td>${stats.matchedLines}</td>",
							"            <td>${stats.mismatchedLines}</td>",
							"            <td>${stats.exemptedLines}</td>",
							"            <td>${stats.exemptedFields}</td>",
							"            <td>${stats.boomiStatus}</td>",
							"            <td>${stats.mulesoftStatus}</td>",
							"            <td>${formatTimestamp(stats.timestamp)}</td>",
							"        </tr>",
							"    `;",
							"};",
							"",
							"const generateTableRows = (reports) => ",
							"    reports.map(createTableRow).join('');",
							"",
							"const escapeForTemplate = (text) => ",
							"    text.replace(/`/g, '\\\\`').replace(/\\$/g, '\\\\$');",
							"",
							"const generateHTML = (reports, summaryStats, csvSummaryContent, csvFullContent) => {",
							"    const tableRows = generateTableRows(reports);",
							"",
							"    return `",
							"    <!DOCTYPE html>",
							"    <html lang=\"en\">",
							"    <head>",
							"        <meta charset=\"UTF-8\">",
							"        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
							"        <title>Test Execution Report</title>",
							"        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">",
							"        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>",
							"        <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap\" rel=\"stylesheet\">",
							"        <script src=\"https://d3js.org/d3.v7.min.js\"></script>",
							"        <style>",
							"            :root {",
							"                --md-sys-color-primary: #6750A4;",
							"                --md-sys-color-on-primary: #FFFFFF;",
							"                --md-sys-color-primary-container: #EADDFF;",
							"                --md-sys-color-on-primary-container: #21005D;",
							"                --md-sys-color-secondary-container: #E8DEF8;",
							"                --md-sys-color-on-secondary-container: #1D192B;",
							"                --md-sys-color-surface: #FFFBFE;",
							"                --md-sys-color-surface-variant: #E7E0EC;",
							"                --md-sys-color-on-surface: #1C1B1F;",
							"                --md-sys-color-on-surface-variant: #49454F;",
							"                --md-sys-color-outline: #79747E;",
							"                --md-sys-color-error: #B3261E;",
							"                --md-sys-color-error-container: #F9DEDC;",
							"                --md-sys-color-on-error-container: #410E0B;",
							"                --md-sys-color-success: #27ae60;",
							"                --md-sys-color-on-success: #ffffff;",
							"                --border-radius: 16px;",
							"                --spacing-small: 8px;",
							"                --spacing-medium: 16px;",
							"                --spacing-large: 24px;",
							"            }",
							"            body { margin: 0; padding: var(--spacing-large); box-sizing: border-box; font-family: 'Roboto', 'Arial', sans-serif; background-color: #F7F2FA; color: var(--md-sys-color-on-surface); }",
							"            .main-container { display: flex; flex-direction: column; gap: var(--spacing-large); }",
							"            .card { background-color: var(--md-sys-color-surface); border-radius: var(--border-radius); padding: var(--spacing-medium); box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 1px 2px rgba(0,0,0,0.06); }",
							"            .header-card h1 { font-size: 24px; font-weight: 500; margin: 0 0 var(--spacing-medium) 0; }",
							"            .summary-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: var(--spacing-medium); }",
							"            .stat-item { display: flex; flex-direction: column; padding: var(--spacing-small); border-radius: 8px; background-color: var(--md-sys-color-surface-variant); }",
							"            .stat-item .label { font-size: 12px; color: var(--md-sys-color-on-surface-variant); }",
							"            .stat-item .value { font-size: 20px; font-weight: 500; }",
							"            .stat-item .value.passed { color: var(--md-sys-color-success); }",
							"            .stat-item .value.failed { color: var(--md-sys-color-error); }",
							"            .tab-bar { display: flex; border-bottom: 1px solid var(--md-sys-color-outline); margin-bottom: var(--spacing-large); }",
							"            .tab-button { padding: var(--spacing-small) var(--spacing-medium); cursor: pointer; border: none; background: none; font-family: inherit; font-size: 14px; font-weight: 500; color: var(--md-sys-color-on-surface-variant); border-bottom: 2px solid transparent; margin-bottom: -1px; }",
							"            .tab-button.active { color: var(--md-sys-color-primary); border-bottom-color: var(--md-sys-color-primary); }",
							"            .tab-content { display: none; }",
							"            .tab-content.active { display: block; }",
							"            .content-section { display: flex; flex-direction: column; gap: var(--spacing-large); }",
							"            .table-container { max-height: 60vh; overflow: auto; border: 1px solid var(--md-sys-color-surface-variant); border-radius: var(--border-radius); }",
							"            table { width: 100%; border-collapse: collapse; font-size: 12px; }",
							"            thead { position: sticky; top: 0; background: var(--md-sys-color-surface); z-index: 10; }",
							"            th { padding: var(--spacing-medium); text-align: left; font-weight: 700; color: var(--md-sys-color-on-surface-variant); border-bottom: 1px solid var(--md-sys-color-outline); white-space: nowrap; }",
							"            td { padding: var(--spacing-small) var(--spacing-medium); border-bottom: 1px solid var(--md-sys-color-surface-variant); vertical-align: middle; }",
							"            tbody tr:hover { background-color: var(--md-sys-color-primary-container); }",
							"            .status-badge { padding: 4px 8px; border-radius: 8px; font-weight: 500; font-size: 11px; text-transform: uppercase; }",
							"            .status-passed { background-color: #C8E6C9; color: #2E7D32; }",
							"            .status-failed { background-color: #FFCDD2; color: #C62828; }",
							"            .copy-btn { background-color: var(--md-sys-color-primary); color: var(--md-sys-color-on-primary); border: none; padding: 10px 24px; border-radius: 20px; cursor: pointer; font-size: 14px; font-weight: 500; transition: background-color 0.2s; }",
							"            .copy-btn:hover { background-color: #5A4091; }",
							"            .copy-btn.secondary { background-color: var(--md-sys-color-secondary-container); color: var(--md-sys-color-on-secondary-container); }",
							"            .copy-btn.secondary:hover { background-color: #D0C6E9; }",
							"            .btn-group { display: flex; gap: var(--spacing-medium); }",
							"            .chart-container { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: var(--spacing-large); align-items: center; justify-items: center; }",
							"            .chart-title { font-size: 16px; font-weight: 500; text-align: center; margin-bottom: var(--spacing-medium); }",
							"        </style>",
							"    </head>",
							"    <body>",
							"        <div class=\"main-container\">",
							"            <div class=\"card header-card\">",
							"                <h1>Test Execution Report</h1>",
							"                <div class=\"summary-grid\">",
							"                    <div class=\"stat-item\"><span class=\"label\">Total Requests</span><span class=\"value\">${summaryStats.total}</span></div>",
							"                    <div class=\"stat-item\"><span class=\"label\">Passed</span><span class=\"value passed\">${summaryStats.passed}</span></div>",
							"                    <div class=\"stat-item\"><span class=\"label\">Failed</span><span class=\"value failed\">${summaryStats.failed}</span></div>",
							"                    <div class=\"stat-item\"><span class=\"label\">Avg Match %</span><span class=\"value\">${summaryStats.avgMatchPercentage}%</span></div>",
							"                    <div class=\"stat-item\"><span class=\"label\">Total Lines</span><span class=\"value\">${summaryStats.totalLines}</span></div>",
							"                    <div class=\"stat-item\"><span class=\"label\">Mismatches</span><span class=\"value\">${summaryStats.totalMismatches}</span></div>",
							"                </div>",
							"            </div>",
							"",
							"            <div class=\"tab-bar\">",
							"                <button class=\"tab-button active\" onclick=\"showTab('report')\">Report</button>",
							"                <button class=\"tab-button\" onclick=\"showTab('charts')\">Charts</button>",
							"            </div>",
							"",
							"            <div id=\"report\" class=\"tab-content active\">",
							"                <div class=\"content-section\">",
							"                    <div class=\"card\">",
							"                         <h3>Export Reports</h3>",
							"                         <div class=\"btn-group\">",
							"                             <button class=\"copy-btn\" id=\"copySummary\">Copy Summary CSV</button>",
							"                             <button class=\"copy-btn secondary\" id=\"copyFull\">Copy Full CSV</button>",
							"                         </div>",
							"                         <div id=\"copy-info\"></div>",
							"                    </div>",
							"                    <div class=\"card table-container\">",
							"                        <table>",
							"                            <thead>",
							"                                <tr><th>#</th><th>Request Name</th><th>Status</th><th>Match %</th><th>Lines</th><th>Matched</th><th>Mismatch</th><th>Exempt</th><th>Exempted Fields</th><th>Boomi</th><th>Mule</th><th>Timestamp</th></tr>",
							"                            </thead>",
							"                            <tbody>",
							"                                ${tableRows}",
							"                            </tbody>",
							"                        </table>",
							"                    </div>",
							"                </div>",
							"            </div>",
							"",
							"            <div id=\"charts\" class=\"tab-content\">",
							"                <div class=\"card chart-container\">",
							"                    <div>",
							"                        <h3 class=\"chart-title\">Overall Status</h3>",
							"                        <div id=\"status-chart\"></div>",
							"                    </div>",
							"                    <div>",
							"                         <h3 class=\"chart-title\">Mismatches per Request</h3>",
							"                         <div id=\"mismatch-chart\"></div>",
							"                    </div>",
							"                </div>",
							"            </div>",
							"        </div>",
							"",
							"        <script>",
							"            const reportsData = ${JSON.stringify(reports)};",
							"",
							"            function showTab(tabName) {",
							"                document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));",
							"                document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));",
							"                document.getElementById(tabName).classList.add('active');",
							"                document.querySelector('[onclick=\"showTab(\\\\\\'' + tabName + '\\\\\\')]').classList.add('active');",
							"            }",
							"",
							"            function drawCharts() {",
							"                // 1. Overall Status Donut Chart - REVISED to fix label positions",
							"                const statusData = [",
							"                    {status: 'Passed', count: ${summaryStats.passed}},",
							"                    {status: 'Failed', count: ${summaryStats.failed}}",
							"                ];",
							"                const width = 250, height = 250, margin = 20;",
							"                const radius = Math.min(width, height) / 2 - margin;",
							"",
							"                const statusSvg = d3.select(\"#status-chart\")",
							"                    .append(\"svg\")",
							"                    .attr(\"width\", width)",
							"                    .attr(\"height\", height + 40) // Add vertical space for labels",
							"                    .append(\"g\")",
							"                    .attr(\"transform\", \"translate(\" + width / 2 + \",\" + (height / 2 + 20) + \")\");",
							"",
							"                const color = d3.scaleOrdinal()",
							"                    .domain(statusData.map(d => d.status))",
							"                    .range(['#27ae60', '#B3261E']);",
							"",
							"                const pie = d3.pie().value(d => d.count);",
							"                const data_ready = pie(statusData);",
							"",
							"                const arc = d3.arc().innerRadius(radius * 0.5).outerRadius(radius);",
							"",
							"                statusSvg.selectAll('path')",
							"                    .data(data_ready)",
							"                    .join('path')",
							"                    .attr('d', arc)",
							"                    .attr('fill', d => color(d.data.status))",
							"                    .attr(\"stroke\", \"#FFFBFE\")",
							"                    .style(\"stroke-width\", \"2px\");",
							"                ",
							"                // Define fixed positions for labels",
							"                const labelPositions = {",
							"                    'Passed': { x: 0, y: -(radius + 15) },",
							"                    'Failed': { x: 0, y: radius + 15 }",
							"                };",
							"",
							"                // Add polylines connecting slices to fixed label positions",
							"                statusSvg.selectAll('polyline')",
							"                    .data(data_ready)",
							"                    .join('polyline')",
							"                    .attr(\"stroke\", \"black\")",
							"                    .style(\"fill\", \"none\")",
							"                    .attr(\"stroke-width\", 1)",
							"                    .attr('points', function(d) {",
							"                        const posA = arc.centroid(d); // Start from the slice centroid",
							"                        const posB = labelPositions[d.data.status]; // End at the fixed position",
							"                        return [posA, [posB.x, posB.y]];",
							"                    });",
							"",
							"                // Add the text labels at their fixed positions",
							"                statusSvg.selectAll('text')",
							"                    .data(data_ready)",
							"                    .join('text')",
							"                    .text(d => d.data.status + ' (' + d.data.count + ')')",
							"                    .attr('transform', function(d) {",
							"                        const pos = labelPositions[d.data.status];",
							"                        return 'translate(' + pos.x + ',' + pos.y + ')';",
							"                    })",
							"                    .style('text-anchor', 'middle')",
							"                    .style(\"font-size\", 12)",
							"                    .attr(\"dy\", \"-0.2em\")",
							"                    .attr(\"fill\", \"#1C1B1F\");",
							"                ",
							"                // 2. Mismatches per Request Bar Chart",
							"                const mismatchData = reportsData.map(r => ({",
							"                    name: r.requestName.length > 20 ? r.requestName.substring(0, 17) + '...' : r.requestName,",
							"                    mismatches: r.statistics.mismatchedLines",
							"                }));",
							"                ",
							"                const barMargin = {top: 20, right: 20, bottom: 90, left: 40},",
							"                      barWidth = 400 - barMargin.left - barMargin.right,",
							"                      barHeight = 300 - barMargin.top - barMargin.bottom;",
							"",
							"                const mismatchSvg = d3.select(\"#mismatch-chart\")",
							"                    .append(\"svg\")",
							"                    .attr(\"width\", barWidth + barMargin.left + barMargin.right)",
							"                    .attr(\"height\", barHeight + barMargin.top + barMargin.bottom)",
							"                    .append(\"g\")",
							"                    .attr(\"transform\", \"translate(\" + barMargin.left + \",\" + barMargin.top + \")\");",
							"",
							"                const x = d3.scaleBand()",
							"                    .range([0, barWidth])",
							"                    .domain(mismatchData.map(d => d.name))",
							"                    .padding(0.2);",
							"",
							"                mismatchSvg.append(\"g\")",
							"                    .attr(\"transform\", \"translate(0,\" + barHeight + \")\")",
							"                    .call(d3.axisBottom(x))",
							"                    .selectAll(\"text\")",
							"                    .attr(\"transform\", \"translate(-10,0)rotate(-45)\")",
							"                    .style(\"text-anchor\", \"end\");",
							"",
							"                const y = d3.scaleLinear()",
							"                    .domain([0, d3.max(mismatchData, d => d.mismatches) || 1])",
							"                    .range([barHeight, 0]);",
							"",
							"                mismatchSvg.append(\"g\").call(d3.axisLeft(y));",
							"",
							"                mismatchSvg.selectAll(\"rect\")",
							"                    .data(mismatchData)",
							"                    .enter()",
							"                    .append(\"rect\")",
							"                    .attr(\"x\", d => x(d.name))",
							"                    .attr(\"y\", d => y(d.mismatches))",
							"                    .attr(\"width\", x.bandwidth())",
							"                    .attr(\"height\", d => barHeight - y(d.mismatches))",
							"                    .attr(\"fill\", \"#6750A4\");",
							"            }",
							"            ",
							"            drawCharts();",
							"",
							"            const summaryCSV = \\`${escapeForTemplate(csvSummaryContent)}\\`;",
							"            const fullCSV = \\`${escapeForTemplate(csvFullContent)}\\`;",
							"            document.getElementById('copySummary').addEventListener('click', () => copyToClipboard(summaryCSV, 'Summary CSV Copied!'));",
							"            document.getElementById('copyFull').addEventListener('click', () => copyToClipboard(fullCSV, 'Full CSV Copied!'));",
							"            ",
							"            function copyToClipboard(text, message) {",
							"                const textarea = document.createElement('textarea');",
							"                textarea.value = text;",
							"                document.body.appendChild(textarea);",
							"                textarea.select();",
							"                document.execCommand('copy');",
							"                document.body.removeChild(textarea);",
							"                showCopyMessage(message);",
							"            }",
							"",
							"            function showCopyMessage(message) {",
							"                const infoDiv = document.getElementById('copy-info');",
							"                infoDiv.textContent = message;",
							"                setTimeout(() => infoDiv.textContent = '', 3000);",
							"            }",
							"        </script>",
							"    </body>",
							"    </html>",
							"    `;",
							"};",
							"",
							"// ========================================================================",
							"// Visualization",
							"// ========================================================================",
							"const showNoReportsMessage = (message) => {",
							"    const style = `",
							"    :root {",
							"        --md-sys-color-primary: #6750A4;",
							"        --md-sys-color-on-primary: #FFFFFF;",
							"        --md-sys-color-primary-container: #EADDFF;",
							"        --md-sys-color-on-primary-container: #21005D;",
							"        --md-sys-color-surface: #FFFBFE;",
							"        --md-sys-color-surface-variant: #E7E0EC;",
							"        --md-sys-color-on-surface: #1C1B1F;",
							"        --md-sys-color-on-surface-variant: #49454F;",
							"        --md-sys-color-outline: #79747E;",
							"        --border-radius: 16px;",
							"        --spacing-small: 8px;",
							"        --spacing-medium: 16px;",
							"        --spacing-large: 24px;",
							"    }",
							"",
							"    body {",
							"        margin: 0;",
							"        padding: var(--spacing-large);",
							"        font-family: 'Roboto', Arial, sans-serif;",
							"        background-color: var(--md-sys-color-surface);",
							"        color: var(--md-sys-color-on-surface);",
							"        display: flex;",
							"        justify-content: center;",
							"        align-items: center;",
							"        min-height: 100vh;",
							"        text-align: center;",
							"    }",
							"",
							"    .container {",
							"        background-color: var(--md-sys-color-surface);",
							"        border-radius: var(--border-radius);",
							"        padding: var(--spacing-large);",
							"        max-width: 480px;",
							"        width: 100%;",
							"        display: flex;",
							"        flex-direction: column;",
							"        gap: var(--spacing-medium);",
							"        align-items: center;",
							"    }",
							"",
							"    .heading {",
							"        font-size: 24px;",
							"        font-weight: 500;",
							"        color: var(--md-sys-color-primary);",
							"        margin-bottom: var(--spacing-small);",
							"    }",
							"",
							"    .message {",
							"        font-size: 16px;",
							"        color: var(--md-sys-color-on-surface-variant);",
							"        margin-bottom: var(--spacing-medium);",
							"    }",
							"",
							"    svg#animation {",
							"        width: 100%;",
							"        height: 220px;",
							"    }",
							"    `;",
							"",
							"    const html = `",
							"<!DOCTYPE html>",
							"<html lang=\"en\">",
							"<head>",
							"    <meta charset=\"UTF-8\" />",
							"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
							"    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">",
							"    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>",
							"    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap\" rel=\"stylesheet\">",
							"    <style>${style}</style>",
							"    <script src=\"https://d3js.org/d3.v7.min.js\"></script>",
							"    <title>No Reports</title>",
							"</head>",
							"<body>",
							"    <div class=\"container\">",
							"        <div class=\"heading\">No Reports</div>",
							"        <div class=\"message\">${message}</div>",
							"        <svg id=\"animation\"></svg>",
							"    </div>",
							"",
							"    <script>",
							"        // Create a simple animated circle pattern using D3",
							"        const svg = d3.select('#animation');",
							"        const width = svg.node().clientWidth;",
							"        const height = svg.node().clientHeight;",
							"",
							"        const circleCount = 12;",
							"        const radius = 80;",
							"        const circleRadius = 10;",
							"        const centerX = width / 2;",
							"        const centerY = height / 2;",
							"",
							"        const circlesData = d3.range(circleCount).map(i => ({",
							"            angle: (i / circleCount) * 2 * Math.PI,",
							"            radius: radius,",
							"        }));",
							"",
							"        const circles = svg.selectAll('circle')",
							"            .data(circlesData)",
							"            .join('circle')",
							"            .attr('cx', d => centerX + d.radius * Math.cos(d.angle))",
							"            .attr('cy', d => centerY + d.radius * Math.sin(d.angle))",
							"            .attr('r', circleRadius)",
							"            .attr('fill', 'var(--md-sys-color-primary)')",
							"            .attr('opacity', 0.6);",
							"",
							"        function animate() {",
							"            circles.transition()",
							"                .duration(2000)",
							"                .attr('opacity', (d, i) => (i % 2 === 0 ? 1 : 0.3))",
							"                .transition()",
							"                .duration(2000)",
							"                .attr('opacity', (d, i) => (i % 2 === 0 ? 0.3 : 1))",
							"                .on('end', animate);",
							"        }",
							"",
							"        animate();",
							"    </script>",
							"</body>",
							"</html>`;",
							"",
							"    pm.visualizer.set(html);",
							"};",
							"",
							"",
							"// ========================================================================",
							"// Main Workflow",
							"// ========================================================================",
							"const generateReport = () => {",
							"    const reportCount = getReportCount();",
							"    ",
							"    if (reportCount === 0) {",
							"        showNoReportsMessage(\"No requests were executed\");",
							"        console.log(\"No reports to display\");",
							"        return;",
							"    }",
							"    ",
							"    console.log(`Generating report for ${reportCount} requests`);",
							"    ",
							"    const reports = loadReports(reportCount);",
							"    ",
							"    if (reports.length === 0) {",
							"        showNoReportsMessage(\"Failed to load report data\");",
							"        return;",
							"    }",
							"    ",
							"    const csvFullContent = generateFullCSV(reports);",
							"    const csvSummaryContent = generateSummaryCSV(reports);",
							"    ",
							"    console.log(`Full CSV size: ${csvFullContent.length} characters`);",
							"    console.log(`Summary CSV size: ${csvSummaryContent.length} characters`);",
							"    ",
							"    setCollectionVar(\"csv_full_report\", csvFullContent);",
							"    setCollectionVar(\"csv_summary_report\", csvSummaryContent);",
							"    ",
							"    const summaryStats = generateSummaryStats(reports);",
							"    const html = generateHTML(reports, summaryStats, csvSummaryContent, csvFullContent);",
							"    ",
							"    pm.visualizer.set(html);",
							"    console.log(`Report visualizer rendered with ${reports.length} entries`);",
							"    console.log(\"CSV data stored in collection variables\");",
							"};",
							"",
							"// ========================================================================",
							"// Entry Point",
							"// ========================================================================",
							"generateReport();",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "[REGRESSION] Test Runner",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ========================================================================",
							"// REGRESSION TEST RUNNER - Pre-request Script (Functional)",
							"// This script runs ONLY for the [Regression Test Runner] request",
							"// ========================================================================",
							"",
							"// ========================================================================",
							"// Utility Functions",
							"// ========================================================================",
							"const getCollectionVar = (key) => pm.collectionVariables.get(key);",
							"",
							"const setCollectionVar = (key, value) => pm.collectionVariables.set(key, value);",
							"",
							"const isRegressionMode = () => getCollectionVar(\"regression_mode\") === \"true\";",
							"",
							"const unescapeQuotes = (str) => ",
							"    str.replace(/\\\\'/g, \"'\").replace(/\\\\\\\\/g, \"\\\\\");",
							"",
							"const transformMuleUrlToBoomi = (requestUrl, muleBase, boomiBase) => {",
							"    let result = requestUrl.replace(muleBase, boomiBase);",
							"    result = result.replace(/\\/[^\\/]+\\/ws\\/rest\\//, '/ws/rest/');",
							"    return result;",
							"};",
							"",
							"// ========================================================================",
							"// cURL Parsing Functions",
							"// ========================================================================",
							"const URL_PATTERNS = [",
							"    /curl\\s+--location\\s+'([^']+)'/,      // Pattern 1: curl --location 'URL'",
							"    /curl\\s+--location\\s+\"([^\"]+)\"/,      // Pattern 2: curl --location \"URL\"",
							"    /curl\\s+'([^']+)'/,                   // Pattern 3: curl 'URL'",
							"    /curl\\s+\"([^\"]+)\"/,                   // Pattern 4: curl \"URL\"",
							"    /curl\\s+([^\\s-][^\\s]*)/               // Pattern 5: curl URL (without quotes)",
							"];",
							"",
							"const tryExtractUrl = (curlCommand, pattern) => {",
							"    const match = curlCommand.match(pattern);",
							"    return match && match[1] ? match[1] : null;",
							"};",
							"",
							"const extractUrlFromCurl = (curlCommand) => {",
							"    if (!curlCommand || typeof curlCommand !== 'string') return null;",
							"    ",
							"    for (const pattern of URL_PATTERNS) {",
							"        const url = tryExtractUrl(curlCommand, pattern);",
							"        if (url) return url;",
							"    }",
							"    ",
							"    return null;",
							"};",
							"",
							"const extractMethodFromCurl = (curlCommand) => {",
							"    const match = curlCommand.match(/--request\\s+(\\w+)/);",
							"    return match ? match[1] : 'GET';",
							"};",
							"",
							"const extractHeadersFromCurl = (curlCommand) => {",
							"    const headers = {};",
							"    const headerRegex = /--header\\s+'([^:]+):\\s*([^']+)'/g;",
							"    let match;",
							"    ",
							"    while ((match = headerRegex.exec(curlCommand)) !== null) {",
							"        headers[match[1].trim()] = match[2].trim();",
							"    }",
							"    ",
							"    return headers;",
							"};",
							"",
							"const extractBodyFromCurl = (curlCommand) => {",
							"    const match = curlCommand.match(/--data-raw\\s+'([\\s\\S]*?)'\\s*$/);",
							"    return match && match[1] ? unescapeQuotes(match[1]) : null;",
							"};",
							"",
							"// ========================================================================",
							"// Request Configuration",
							"// ========================================================================",
							"const parseRequestComponents = (curlCommand) => ({",
							"    url: extractUrlFromCurl(curlCommand),",
							"    method: extractMethodFromCurl(curlCommand),",
							"    headers: extractHeadersFromCurl(curlCommand),",
							"    body: extractBodyFromCurl(curlCommand)",
							"});",
							"",
							"const logExtractionResults = (components) => {",
							"    console.log(`Extracted URL: ${components.url}`);",
							"    console.log(`Extracted Method: ${components.method}`);",
							"    console.log(`Extracted Headers: ${Object.keys(components.headers).length}`);",
							"    console.log(`Has Body: ${components.body ? \"Yes\" : \"No\"}`);",
							"};",
							"",
							"const configureMuleRequest = (components) => {",
							"    pm.request.url = components.url;",
							"    pm.request.method = components.method;",
							"    ",
							"    pm.request.headers.clear();",
							"    Object.keys(components.headers).forEach((key) => {",
							"        pm.request.headers.add({",
							"            key: key,",
							"            value: components.headers[key]",
							"        });",
							"    });",
							"    ",
							"    if (components.body) {",
							"        pm.request.body = {",
							"            mode: 'raw',",
							"            raw: components.body",
							"        };",
							"    }",
							"    ",
							"    console.log(`Mule request configured: ${components.method} ${components.url}`);",
							"};",
							"",
							"// ========================================================================",
							"// Authentication Handling",
							"// ========================================================================",
							"const addBasicAuth = (headers) => {",
							"    const username = getCollectionVar(\"boomi_username\");",
							"    const password = getCollectionVar(\"boomi_password\");",
							"    if (username && password) {",
							"        headers['Authorization'] = `Basic ${btoa(`${username}:${password}`)}`;",
							"    }",
							"};",
							"",
							"const addBearerAuth = (headers) => {",
							"    const token = getCollectionVar(\"boomi_bearer_token\");",
							"    if (token) {",
							"        headers['Authorization'] = `Bearer ${token}`;",
							"    }",
							"};",
							"",
							"const addApiKeyAuth = (headers) => {",
							"    const apiKey = getCollectionVar(\"boomi_api_key\");",
							"    const headerName = getCollectionVar(\"boomi_api_key_header\") || \"X-API-Key\";",
							"    if (apiKey) {",
							"        headers[headerName] = apiKey;",
							"    }",
							"};",
							"",
							"const applyAuthentication = (headers, authType) => {",
							"    if (authType === \"same\") return;",
							"    ",
							"    const authHandlers = {",
							"        'basic': () => addBasicAuth(headers),",
							"        'bearer': () => addBearerAuth(headers),",
							"        'api-key': () => addApiKeyAuth(headers)",
							"    };",
							"    ",
							"    const handler = authHandlers[authType];",
							"    if (handler) handler();",
							"};",
							"",
							"// ========================================================================",
							"// Boomi Request Preparation",
							"// ========================================================================",
							"const getBaseUrls = () => ({",
							"    mule: pm.variables.replaceIn(getCollectionVar(\"mule_base_url\")),",
							"    boomi: pm.variables.replaceIn(getCollectionVar(\"boomi_base_url\"))",
							"});",
							"",
							"const validateBaseUrls = (baseUrls) => baseUrls.mule && baseUrls.boomi;",
							"",
							"const prepareBoomiHeaders = (extractedHeaders, authType) => {",
							"    const boomiHeaders = { ...extractedHeaders };",
							"    applyAuthentication(boomiHeaders, authType);",
							"    return boomiHeaders;",
							"};",
							"",
							"const buildBoomiRequest = (url, method, headers, body) => {",
							"    const boomiRequest = {",
							"        url: url,",
							"        method: method,",
							"        header: headers",
							"    };",
							"    ",
							"    if (body) {",
							"        boomiRequest.body = {",
							"            mode: 'raw',",
							"            raw: body",
							"        };",
							"    }",
							"    ",
							"    return boomiRequest;",
							"};",
							"",
							"// ========================================================================",
							"// Response Handling",
							"// ========================================================================",
							"const handleBoomiError = (err) => {",
							"    console.error(\"Boomi request failed:\", err.message);",
							"    setCollectionVar(\"boomi_response\", `ERROR: ${err.message}`);",
							"    setCollectionVar(\"boomi_status\", 0);",
							"};",
							"",
							"const handleBoomiSuccess = (response) => {",
							"    setCollectionVar(\"boomi_response\", response.text());",
							"    setCollectionVar(\"boomi_status\", response.code);",
							"    console.log(`Boomi response received: ${response.code}`);",
							"};",
							"",
							"const sendBoomiRequest = (boomiRequest) => {",
							"    console.log(\"Sending Boomi request...\");",
							"    pm.sendRequest(boomiRequest, (err, response) => {",
							"        if (err) {",
							"            handleBoomiError(err);",
							"        } else {",
							"            handleBoomiSuccess(response);",
							"        }",
							"    });",
							"};",
							"",
							"// ========================================================================",
							"// Main Workflow",
							"// ========================================================================",
							"const processRegressionTest = (curlCommand, requestName) => {",
							"    console.log(`Processing: ${requestName}`);",
							"    ",
							"    const components = parseRequestComponents(curlCommand);",
							"    ",
							"    if (!components.url) {",
							"        console.error(\"Could not extract URL from cURL command\");",
							"        console.log(`cURL: ${curlCommand}`);",
							"        return;",
							"    }",
							"    ",
							"    logExtractionResults(components);",
							"    configureMuleRequest(components);",
							"    ",
							"    const baseUrls = getBaseUrls();",
							"    ",
							"    if (!validateBaseUrls(baseUrls)) {",
							"        console.error(\"Missing base URLs in collection variables\");",
							"        return;",
							"    }",
							"    ",
							"    const boomiUrl = transformMuleUrlToBoomi(components.url, baseUrls.mule, baseUrls.boomi);",
							"    console.log(`Boomi URL: ${boomiUrl}`);",
							"    ",
							"    const authType = getCollectionVar(\"boomi_auth_type\") || \"same\";",
							"    const boomiHeaders = prepareBoomiHeaders(components.headers, authType);",
							"    const boomiRequest = buildBoomiRequest(boomiUrl, components.method, boomiHeaders, components.body);",
							"    ",
							"    setCollectionVar(\"temp_request_name\", requestName);",
							"    setCollectionVar(\"temp_request_curl\", curlCommand);",
							"    ",
							"    sendBoomiRequest(boomiRequest);",
							"    ",
							"    console.log(\"=== REGRESSION PRE-REQUEST COMPLETE ===\");",
							"    console.log(\"Mule request will now execute...\");",
							"};",
							"",
							"// ========================================================================",
							"// Entry Point",
							"// ========================================================================",
							"const runRegressionTestRunner = () => {",
							"    if (!isRegressionMode()) {",
							"        console.log(\"Not in regression mode, skipping...\");",
							"        return;",
							"    }",
							"    ",
							"    console.log(\"=== REGRESSION TEST RUNNER STARTED ===\");",
							"    ",
							"    const curlCommand = getCollectionVar(\"regression_curl\");",
							"    const requestName = getCollectionVar(\"regression_request_name\");",
							"    ",
							"    if (!curlCommand) {",
							"        console.error(\"No cURL command found from collection pre-request\");",
							"        return;",
							"    }",
							"    ",
							"    processRegressionTest(curlCommand, requestName);",
							"};",
							"",
							"// ========================================================================",
							"// Execute",
							"// ========================================================================",
							"runRegressionTestRunner();",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Optional: Add any regression-specific logging here",
							"console.log(\"Regression request completed. Collection post-request will handle comparison.\");",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mule_base_url}}/placeholder",
					"host": [
						"{{mule_base_url}}"
					],
					"path": [
						"placeholder"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"// ========================================================================",
					"// Utility Functions - String & URL Processing",
					"// ========================================================================",
					"const escapeForCurl = (str) => String(str).replace(/'/g, \"'\\\\''\");",
					"",
					"const escapeBody = (body) => ",
					"    String(body).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"'\\\\''\");",
					"",
					"const transformMuleUrlToBoomi = (requestUrl, muleBase, boomiBase) => {",
					"    const fullUrl = requestUrl;",
					"    let result = fullUrl.replace(muleBase, boomiBase);",
					"    result = result.replace(/\\/[^\\/]+\\/ws\\/rest\\//, '/ws/rest/');",
					"    return result;",
					"};",
					"",
					"// ========================================================================",
					"// Detection & Validation Functions",
					"// ========================================================================",
					"const isCollectionRunner = () => ",
					"    pm.info.iteration !== undefined && pm.info.iteration >= 0;",
					"",
					"const hasCurlData = () => ",
					"    pm.iterationData.get(\"cURL Command\");",
					"",
					"const isRegressionMode = () => ",
					"    isCollectionRunner() && hasCurlData();",
					"",
					"const shouldSkipUtilityRequest = (requestName) => ",
					"    requestName.startsWith(\"_\") || requestName.startsWith(\"[\");",
					"",
					"const validateBaseUrls = (muleBaseUrl, boomiBaseUrl) => ",
					"    muleBaseUrl && boomiBaseUrl;",
					"",
					"// ========================================================================",
					"// Collection Variable Management",
					"// ========================================================================",
					"const getCollectionVar = (key) => pm.collectionVariables.get(key);",
					"",
					"const setCollectionVar = (key, value) => ",
					"    pm.collectionVariables.set(key, value);",
					"",
					"const initializeRequestCounter = () => {",
					"    const requestCounter = getCollectionVar(\"report_request_count\");",
					"    if (!requestCounter || requestCounter === \"0\") {",
					"        setCollectionVar(\"report_request_count\", \"0\");",
					"    }",
					"};",
					"",
					"const incrementRequestCounter = () => {",
					"    const currentCount = parseInt(getCollectionVar(\"report_request_count\") || \"0\") + 1;",
					"    setCollectionVar(\"report_request_count\", currentCount.toString());",
					"    setCollectionVar(\"current_report_index\", currentCount.toString());",
					"    return currentCount;",
					"};",
					"",
					"// ========================================================================",
					"// Regression Mode Handling",
					"// ========================================================================",
					"const handleRegressionMode = () => {",
					"    console.log(\"=== REGRESSION MODE DETECTED ===\");",
					"    ",
					"    setCollectionVar(\"regression_mode\", \"true\");",
					"    setCollectionVar(\"regression_curl\", pm.iterationData.get(\"cURL Command\"));",
					"    setCollectionVar(\"regression_request_name\", pm.iterationData.get(\"Request Name\") || \"Unknown\");",
					"    ",
					"    initializeRequestCounter();",
					"    const currentCount = incrementRequestCounter();",
					"    ",
					"    console.log(`Regression test #${currentCount}: ${pm.iterationData.get(\"Request Name\")}`);",
					"    console.log(\"Variables set. Allowing [Regression Test Runner] to execute...\");",
					"};",
					"",
					"// ========================================================================",
					"// Header Processing",
					"// ========================================================================",
					"const EXCLUDED_HEADERS = ['host', 'content-length', 'connection', 'user-agent', 'postman-token'];",
					"",
					"const shouldIncludeHeader = (header) => ",
					"    !header.disabled && !EXCLUDED_HEADERS.includes(header.key.toLowerCase());",
					"",
					"const processHeaders = (currentRequest) => {",
					"    const headers = {};",
					"    currentRequest.headers.each((header) => {",
					"        if (shouldIncludeHeader(header)) {",
					"            const resolvedValue = pm.variables.replaceIn(header.value);",
					"            headers[header.key] = resolvedValue;",
					"        }",
					"    });",
					"    return headers;",
					"};",
					"",
					"// ========================================================================",
					"// Body Processing",
					"// ========================================================================",
					"const BODY_METHODS = ['POST', 'PUT', 'PATCH', 'DELETE'];",
					"",
					"const shouldProcessBody = (method) => BODY_METHODS.includes(method);",
					"",
					"const processFormData = (formDataCollection) => {",
					"    const formData = {};",
					"    formDataCollection.each((item) => {",
					"        if (!item.disabled) {",
					"            formData[item.key] = pm.variables.replaceIn(item.value);",
					"        }",
					"    });",
					"    return formData;",
					"};",
					"",
					"const processUrlEncoded = (urlencodedCollection) => {",
					"    const urlencodedData = {};",
					"    urlencodedCollection.each((item) => {",
					"        if (!item.disabled) {",
					"            urlencodedData[item.key] = pm.variables.replaceIn(item.value);",
					"        }",
					"    });",
					"    return urlencodedData;",
					"};",
					"",
					"const processGraphQL = (graphqlBody) => ",
					"    JSON.stringify({",
					"        query: pm.variables.replaceIn(graphqlBody.query),",
					"        variables: graphqlBody.variables",
					"    });",
					"",
					"const processRequestBody = (currentRequest, method) => {",
					"    if (!currentRequest.body || !shouldProcessBody(method)) {",
					"        return { requestBody: null, bodyMode: null };",
					"    }",
					"    ",
					"    const bodyMode = currentRequest.body.mode;",
					"    let requestBody = null;",
					"    ",
					"    switch (bodyMode) {",
					"        case 'raw':",
					"            requestBody = pm.variables.replaceIn(currentRequest.body.raw);",
					"            break;",
					"        case 'formdata':",
					"            requestBody = processFormData(currentRequest.body.formdata);",
					"            break;",
					"        case 'urlencoded':",
					"            requestBody = processUrlEncoded(currentRequest.body.urlencoded);",
					"            break;",
					"        case 'graphql':",
					"            requestBody = processGraphQL(currentRequest.body.graphql);",
					"            break;",
					"    }",
					"    ",
					"    return { requestBody, bodyMode };",
					"};",
					"",
					"// ========================================================================",
					"// Content Type Detection",
					"// ========================================================================",
					"const detectContentType = (trimmedBody) => {",
					"    if (trimmedBody.startsWith('{') || trimmedBody.startsWith('[')) {",
					"        return 'application/json';",
					"    } else if (trimmedBody.startsWith('<')) {",
					"        return 'application/xml';",
					"    }",
					"    return null;",
					"};",
					"",
					"const addContentTypeIfNeeded = (headers, requestBody, bodyMode, method) => {",
					"    if (!requestBody || method === 'GET') return;",
					"    ",
					"    const existingContentType = headers['Content-Type'] || headers['content-type'];",
					"    if (!existingContentType && bodyMode === 'raw') {",
					"        const trimmedBody = requestBody.trim();",
					"        const contentType = detectContentType(trimmedBody);",
					"        if (contentType) {",
					"            headers['Content-Type'] = contentType;",
					"        }",
					"    }",
					"};",
					"",
					"// ========================================================================",
					"// Authentication Handling",
					"// ========================================================================",
					"const addBasicAuth = (headers) => {",
					"    const boomiUsername = getCollectionVar(\"boomi_username\");",
					"    const boomiPassword = getCollectionVar(\"boomi_password\");",
					"    if (boomiUsername && boomiPassword) {",
					"        headers['Authorization'] = `Basic ${btoa(`${boomiUsername}:${boomiPassword}`)}`;",
					"    }",
					"};",
					"",
					"const addBearerAuth = (headers) => {",
					"    const boomiToken = getCollectionVar(\"boomi_bearer_token\");",
					"    if (boomiToken) {",
					"        headers['Authorization'] = `Bearer ${boomiToken}`;",
					"    }",
					"};",
					"",
					"const addApiKeyAuth = (headers) => {",
					"    const boomiApiKey = getCollectionVar(\"boomi_api_key\");",
					"    const boomiApiKeyHeader = getCollectionVar(\"boomi_api_key_header\") || \"X-API-Key\";",
					"    if (boomiApiKey) {",
					"        headers[boomiApiKeyHeader] = boomiApiKey;",
					"    }",
					"};",
					"",
					"const applyAuthentication = (headers) => {",
					"    const authType = getCollectionVar(\"boomi_auth_type\") || \"same\";",
					"    ",
					"    if (authType === \"same\") return;",
					"    ",
					"    const authHandlers = {",
					"        'basic': () => addBasicAuth(headers),",
					"        'bearer': () => addBearerAuth(headers),",
					"        'api-key': () => addApiKeyAuth(headers)",
					"    };",
					"    ",
					"    const handler = authHandlers[authType];",
					"    if (handler) handler();",
					"};",
					"",
					"// ========================================================================",
					"// Request Building",
					"// ========================================================================",
					"const buildBoomiRequestBody = (requestBody, bodyMode) => {",
					"    if (!requestBody) return null;",
					"    ",
					"    const bodyModes = {",
					"        'raw': { mode: 'raw', raw: requestBody },",
					"        'formdata': { mode: 'formdata', formdata: requestBody },",
					"        'urlencoded': { mode: 'urlencoded', urlencoded: requestBody }",
					"    };",
					"    ",
					"    return bodyModes[bodyMode] || {",
					"        mode: 'raw',",
					"        raw: typeof requestBody === 'string' ? requestBody : JSON.stringify(requestBody)",
					"    };",
					"};",
					"",
					"const buildBoomiRequest = (boomiUrl, method, headers, requestBody, bodyMode) => {",
					"    const boomiRequest = {",
					"        url: boomiUrl,",
					"        method: method,",
					"        header: headers",
					"    };",
					"    ",
					"    const body = buildBoomiRequestBody(requestBody, bodyMode);",
					"    if (body) {",
					"        boomiRequest.body = body;",
					"    }",
					"    ",
					"    return boomiRequest;",
					"};",
					"",
					"// ========================================================================",
					"// cURL Command Generation",
					"// ========================================================================",
					"const buildCurlBase = (requestUrl, method) => {",
					"    let curlCommand = `curl --location '${requestUrl}'`;",
					"    if (method !== 'GET') {",
					"        curlCommand += ` \\\\\\n--request ${method}`;",
					"    }",
					"    return curlCommand;",
					"};",
					"",
					"const addCurlHeaders = (curlCommand, headers) => {",
					"    return Object.keys(headers).reduce((cmd, headerKey) => {",
					"        const headerValue = headers[headerKey];",
					"        const escapedValue = escapeForCurl(headerValue);",
					"        return `${cmd} \\\\\\n--header '${headerKey}: ${escapedValue}'`;",
					"    }, curlCommand);",
					"};",
					"",
					"const addCurlBody = (curlCommand, requestBody, bodyMode) => {",
					"    if (requestBody && bodyMode === 'raw') {",
					"        const escapedBody = escapeBody(requestBody);",
					"        return `${curlCommand} \\\\\\n--data-raw '${escapedBody}'`;",
					"    }",
					"    return curlCommand;",
					"};",
					"",
					"const generateCurlCommand = (requestUrl, method, headers, requestBody, bodyMode) => {",
					"    let curlCommand = buildCurlBase(requestUrl, method);",
					"    curlCommand = addCurlHeaders(curlCommand, headers);",
					"    curlCommand = addCurlBody(curlCommand, requestBody, bodyMode);",
					"    return curlCommand;",
					"};",
					"",
					"// ========================================================================",
					"// Response Handling",
					"// ========================================================================",
					"const handleBoomiError = (err) => {",
					"    console.error(\"Boomi request failed:\", err.message);",
					"    setCollectionVar(\"boomi_response\", `ERROR: ${err.message}`);",
					"    setCollectionVar(\"boomi_status\", 0);",
					"};",
					"",
					"const handleBoomiSuccess = (response) => {",
					"    setCollectionVar(\"boomi_response\", response.text());",
					"    setCollectionVar(\"boomi_status\", response.code);",
					"    console.log(`Boomi response received: ${response.code}`);",
					"};",
					"",
					"const sendBoomiRequest = (boomiRequest) => {",
					"    pm.sendRequest(boomiRequest, (err, response) => {",
					"        if (err) {",
					"            handleBoomiError(err);",
					"        } else {",
					"            handleBoomiSuccess(response);",
					"        }",
					"    });",
					"};",
					"",
					"// ========================================================================",
					"// Main Workflow",
					"// ========================================================================",
					"const processNormalRequest = () => {",
					"    initializeRequestCounter();",
					"    const currentCount = incrementRequestCounter();",
					"    console.log(`Processing request #${currentCount}: ${pm.info.requestName}`);",
					"    ",
					"    const muleBaseUrl = pm.variables.replaceIn(getCollectionVar(\"mule_base_url\"));",
					"    const boomiBaseUrl = pm.variables.replaceIn(getCollectionVar(\"boomi_base_url\"));",
					"    ",
					"    if (!validateBaseUrls(muleBaseUrl, boomiBaseUrl)) {",
					"        console.error(\"Missing base URLs in collection variables\");",
					"        return;",
					"    }",
					"    ",
					"    const currentRequest = pm.request;",
					"    const method = currentRequest.method;",
					"    const requestUrl = pm.variables.replaceIn(pm.request.url.toString());",
					"    ",
					"    const boomiUrl = transformMuleUrlToBoomi(requestUrl, muleBaseUrl, boomiBaseUrl);",
					"    ",
					"    console.log(`Mule URL: ${requestUrl}`);",
					"    console.log(`Boomi URL: ${boomiUrl}`);",
					"    ",
					"    if (!boomiUrl) {",
					"        console.error(\"Failed to generate Boomi URL\");",
					"        return;",
					"    }",
					"    ",
					"    const headers = processHeaders(currentRequest);",
					"    const { requestBody, bodyMode } = processRequestBody(currentRequest, method);",
					"    ",
					"    addContentTypeIfNeeded(headers, requestBody, bodyMode, method);",
					"    applyAuthentication(headers);",
					"    ",
					"    const boomiRequest = buildBoomiRequest(boomiUrl, method, headers, requestBody, bodyMode);",
					"    const curlCommand = generateCurlCommand(requestUrl, method, headers, requestBody, bodyMode);",
					"    ",
					"    setCollectionVar(\"temp_request_name\", pm.info.requestName);",
					"    setCollectionVar(\"temp_request_curl\", curlCommand);",
					"    console.log(`cURL generated successfully, length: ${curlCommand.length} characters`);",
					"    ",
					"    sendBoomiRequest(boomiRequest);",
					"};",
					"",
					"// ========================================================================",
					"// Entry Point",
					"// ========================================================================",
					"if (isRegressionMode()) {",
					"    handleRegressionMode();",
					"    return;",
					"}",
					"",
					"setCollectionVar(\"regression_mode\", \"false\");",
					"",
					"if (shouldSkipUtilityRequest(pm.info.requestName)) {",
					"    console.log(`Skipping pre-request for: ${pm.info.requestName}`);",
					"    return;",
					"}",
					"",
					"processNormalRequest();",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"// ========================================================================",
					"// Utility: Primitives, JSON, Regex",
					"// ========================================================================",
					"const isPrimitive = (value) => typeof value !== 'object' || value === null;",
					"",
					"const parseJSON = (text) => {",
					"    try { return JSON.parse(text); }",
					"    catch (e) { return text; }",
					"};",
					"",
					"// ========================================================================",
					"// Field Exemption with Full Regex and Wildcard Support",
					"// ========================================================================",
					"const escapeRegex = (str) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');",
					"",
					"const isWildcardPattern = (field) => field.includes('*') || field.includes('?');",
					"",
					"const isFullRegexPattern = (field) => ",
					"    field.startsWith('/') && field.lastIndexOf('/') > 0;",
					"",
					"const convertWildcardToRegex = (pattern) => {",
					"    let regexPattern = pattern.replace(/[.+^${}()|[\\]\\\\]/g, '\\\\$&');",
					"    regexPattern = regexPattern.replace(/\\*/g, '.*');",
					"    regexPattern = regexPattern.replace(/\\?/g, '.');",
					"    return regexPattern;",
					"};",
					"",
					"const parseFullRegex = (regexString) => {",
					"    const lastSlashIndex = regexString.lastIndexOf('/');",
					"    const pattern = regexString.slice(1, lastSlashIndex);",
					"    const flags = regexString.slice(lastSlashIndex + 1);",
					"    ",
					"    try {",
					"        return new RegExp(pattern, flags);",
					"    } catch (e) {",
					"        console.warn(`Invalid regex pattern: ${regexString}`, e.message);",
					"        return null;",
					"    }",
					"};",
					"",
					"const extractFieldName = (path) => {",
					"    if (!path) return '';",
					"    // Extract the last field name from path like \"data.user.name\" -> \"name\"",
					"    // or \"items[0].status\" -> \"status\"",
					"    const match = path.match(/\\.([^.\\[\\]]+)$|^([^.\\[\\]]+)$/);",
					"    return match ? (match[1] || match[2]) : path;",
					"};",
					"",
					"const isFieldExempted = (path, exemptedField) => {",
					"    if (!path || !exemptedField) return { isExempted: false, matchedField: null };",
					"    ",
					"    // Mode 1: Full Regex Pattern (wrapped in slashes)",
					"    if (isFullRegexPattern(exemptedField)) {",
					"        const regex = parseFullRegex(exemptedField);",
					"        if (regex && regex.test(path)) {",
					"            return { isExempted: true, matchedField: path };",
					"        }",
					"        return { isExempted: false, matchedField: null };",
					"    }",
					"    ",
					"    // Mode 2: Wildcard Pattern (contains * or ?)",
					"    if (isWildcardPattern(exemptedField)) {",
					"        const fieldName = extractFieldName(path);",
					"        const regexPattern = convertWildcardToRegex(exemptedField);",
					"        const pattern = new RegExp(`^${regexPattern}$`);",
					"        ",
					"        if (pattern.test(fieldName)) {",
					"            return { isExempted: true, matchedField: path };",
					"        }",
					"        return { isExempted: false, matchedField: null };",
					"    }",
					"    ",
					"    // Mode 3: Simple String (exact field name match)",
					"    const fieldName = extractFieldName(path);",
					"    if (fieldName === exemptedField) {",
					"        return { isExempted: true, matchedField: path };",
					"    }",
					"    ",
					"    return { isExempted: false, matchedField: null };",
					"};",
					"",
					"",
					"// ========================================================================",
					"// Data Normalization",
					"// ========================================================================",
					"const normalizeValue = (value) => {",
					"    if (Array.isArray(value)) {",
					"        const allPrimitive = value.every(isPrimitive);",
					"        return allPrimitive ? [...value].sort() : value.map(normalizeValue);",
					"    }",
					"    if (value !== null && typeof value === 'object') {",
					"        return Object.keys(value)",
					"            .sort()",
					"            .reduce((acc, key) => ({",
					"                ...acc,",
					"                [key]: normalizeValue(value[key])",
					"            }), {});",
					"    }",
					"    return value;",
					"};",
					"",
					"// ========================================================================",
					"// JSON Line Construction",
					"// ========================================================================",
					"const createLine = (text, indent, path, additionalProps = {}) => ({",
					"    text,",
					"    indent,",
					"    path,",
					"    ...additionalProps",
					"});",
					"",
					"const buildJSONLinesRecursive = (obj, path = '', indent = 0) => {",
					"    if (obj === null)",
					"        return [createLine('null', indent, path, { isPrimitive: true })];",
					"    if (!isPrimitive(obj)) {",
					"        if (Array.isArray(obj))",
					"            return buildArrayLines(obj, path, indent);",
					"        return buildObjectLines(obj, path, indent);",
					"    }",
					"    return [createLine(JSON.stringify(obj), indent, path, { isPrimitive: true, value: obj })];",
					"};",
					"",
					"const buildArrayLines = (arr, path, indent) => {",
					"    const allPrimitive = arr.every(isPrimitive);",
					"    const lines = [createLine('[', indent, path, { type: 'open-array' })];",
					"    arr.forEach((item, idx) => {",
					"        const itemPath = `${path}[${idx}]`;",
					"        const comma = idx < arr.length - 1 ? ',' : '';",
					"        const itemLines = buildJSONLinesRecursive(item, itemPath, indent + 1);",
					"        itemLines.forEach((line, lineIdx) => {",
					"            if (lineIdx === itemLines.length - 1) line.text += comma;",
					"            if (allPrimitive && line.isPrimitive) {",
					"                line.arrayPath = path;",
					"                line.arrayValue = item;",
					"            }",
					"            lines.push(line);",
					"        });",
					"    });",
					"    lines.push(createLine(']', indent, path, { type: 'close-array' }));",
					"    return lines;",
					"};",
					"",
					"const buildObjectLines = (obj, path, indent) => {",
					"    const lines = [createLine('{', indent, path, { type: 'open-object' })];",
					"    const keys = Object.keys(obj).sort();",
					"    keys.forEach((key, idx) => {",
					"        const keyPath = path ? `${path}.${key}` : key;",
					"        const value = obj[key];",
					"        const comma = idx < keys.length - 1 ? ',' : '';",
					"        if (!isPrimitive(value)) {",
					"            lines.push(createLine(`\"${key}\": `, indent + 1, keyPath, { type: 'key' }));",
					"            const valueLines = buildJSONLinesRecursive(value, keyPath, indent + 1);",
					"            valueLines.forEach((line, lineIdx) => {",
					"                if (lineIdx === valueLines.length - 1) line.text += comma;",
					"                lines.push(line);",
					"            });",
					"        } else {",
					"            lines.push(createLine(`\"${key}\": ${JSON.stringify(value)}${comma}`, indent + 1, keyPath, { isPrimitive: true, value }));",
					"        }",
					"    });",
					"    lines.push(createLine('}', indent, path, { type: 'close-object' }));",
					"    return lines;",
					"};",
					"",
					"const buildJSONLines = (normalizedData) => ({",
					"    boomiLines: buildJSONLinesRecursive(normalizedData.boomiNorm),",
					"    muleLines: buildJSONLinesRecursive(normalizedData.muleNorm)",
					"});",
					"",
					"// ========================================================================",
					"// Array Alignment (LCS)",
					"// ========================================================================",
					"const groupArrayElements = (lines, sourceType) => {",
					"    return lines.reduce((groups, line, idx) => {",
					"        if (line.arrayPath) {",
					"            if (!groups[line.arrayPath]) groups[line.arrayPath] = { boomi: [], mule: [] };",
					"            groups[line.arrayPath][sourceType].push({ line, idx });",
					"        }",
					"        return groups;",
					"    }, {});",
					"};",
					"",
					"const findValueInRange = (value, array, startIdx, range = 10) => {",
					"    const endIdx = Math.min(startIdx + range, array.length);",
					"    for (let i = startIdx + 1; i < endIdx; i++) {",
					"        if (value === array[i]) return i;",
					"    }",
					"    return -1;",
					"};",
					"",
					"const alignArrayPair = (bValues, mValues) => {",
					"    const aligned = [];",
					"    let bIdx = 0;",
					"    let mIdx = 0;",
					"    while (bIdx < bValues.length || mIdx < mValues.length) {",
					"        if (bIdx >= bValues.length) aligned.push({ bIdx: null, mIdx: mIdx++ });",
					"        else if (mIdx >= mValues.length) aligned.push({ bIdx: bIdx++, mIdx: null });",
					"        else if (bValues[bIdx] === mValues[mIdx]) aligned.push({ bIdx: bIdx++, mIdx: mIdx++ });",
					"        else {",
					"            const foundInMule = findValueInRange(bValues[bIdx], mValues, mIdx);",
					"            const foundInBoomi = findValueInRange(mValues[mIdx], bValues, bIdx);",
					"            if (foundInMule === -1 && foundInBoomi === -1) {",
					"                aligned.push({ bIdx: bIdx++, mIdx: null });",
					"                aligned.push({ bIdx: null, mIdx: mIdx++ });",
					"            } else if (foundInMule !== -1 && (foundInBoomi === -1 || (foundInMule - mIdx) <= (foundInBoomi - bIdx))) {",
					"                aligned.push({ bIdx: null, mIdx: mIdx++ });",
					"            } else {",
					"                aligned.push({ bIdx: bIdx++, mIdx: null });",
					"            }",
					"        }",
					"    }",
					"    return aligned;",
					"};",
					"",
					"const createAlignmentMap = (bItems, mItems, aligned) => {",
					"    const alignmentMap = { boomi: new Map(), mule: new Map() };",
					"    aligned.forEach(pair => {",
					"        if (pair.bIdx !== null && pair.mIdx !== null) {",
					"            alignmentMap.boomi.set(bItems[pair.bIdx].idx, mItems[pair.mIdx].idx);",
					"            alignmentMap.mule.set(mItems[pair.mIdx].idx, bItems[pair.bIdx].idx);",
					"        }",
					"    });",
					"    return alignmentMap;",
					"};",
					"",
					"const alignPrimitiveArrays = (bLines, mLines) => {",
					"    const bGroups = groupArrayElements(bLines, 'boomi');",
					"    const mGroups = groupArrayElements(mLines, 'mule');",
					"    const arrayGroups = { ...bGroups };",
					"    Object.keys(mGroups).forEach(key => {",
					"        if (!arrayGroups[key]) arrayGroups[key] = { boomi: [], mule: [] };",
					"        arrayGroups[key].mule = mGroups[key].mule;",
					"    });",
					"    const combinedMap = { boomi: new Map(), mule: new Map() };",
					"    Object.keys(arrayGroups).forEach(arrayPath => {",
					"        const { boomi: bItems, mule: mItems } = arrayGroups[arrayPath];",
					"        const bValues = bItems.map(item => item.line.arrayValue);",
					"        const mValues = mItems.map(item => item.line.arrayValue);",
					"        const aligned = alignArrayPair(bValues, mValues);",
					"        const alignmentMap = createAlignmentMap(bItems, mItems, aligned);",
					"        alignmentMap.boomi.forEach((v, k) => combinedMap.boomi.set(k, v));",
					"        alignmentMap.mule.forEach((v, k) => combinedMap.mule.set(k, v));",
					"    });",
					"    return combinedMap;",
					"};",
					"",
					"// ========================================================================",
					"// Line Alignment & Visualization Helpers",
					"// ========================================================================",
					"const createEmptyLine = (referenceLine) => ({",
					"    text: '',",
					"    indent: referenceLine.indent,",
					"    isEmpty: true,",
					"    path: referenceLine.path",
					"});",
					"",
					"const createAlignedPair = (boomi, mule, status) => ({ boomi, mule, status });",
					"",
					"const determineAlignmentStatus = (leftLine, rightLine) => {",
					"    if (leftLine.path === rightLine.path && leftLine.type === rightLine.type) {",
					"        return (leftLine.text !== rightLine.text && !leftLine.type) ? 'mismatch' : 'match';",
					"    }",
					"    return null;",
					"};",
					"",
					"const lookAhead = (lines, startIdx, targetPath, targetType, range = 30) => {",
					"    const endIdx = Math.min(startIdx + range, lines.length);",
					"    for (let i = startIdx + 1; i < endIdx; i++) {",
					"        if (lines[i].path === targetPath && lines[i].type === targetType) return true;",
					"    }",
					"    return false;",
					"};",
					"",
					"const alignLinesWithArrays = (leftLines, rightLines, arrayMap) => {",
					"    const aligned = [];",
					"    let leftIdx = 0, rightIdx = 0;",
					"    while (leftIdx < leftLines.length || rightIdx < rightLines.length) {",
					"        const leftLine = leftLines[leftIdx];",
					"        const rightLine = rightLines[rightIdx];",
					"",
					"        if (!leftLine) {",
					"            aligned.push(createAlignedPair(createEmptyLine(rightLine), rightLine, 'only_mule'));",
					"            rightIdx++;",
					"        } else if (!rightLine) {",
					"            aligned.push(createAlignedPair(leftLine, createEmptyLine(leftLine), 'only_boomi'));",
					"            leftIdx++;",
					"        } else {",
					"            const mappedRight = arrayMap.boomi.get(leftIdx);",
					"            const mappedLeft = arrayMap.mule.get(rightIdx);",
					"",
					"            if (mappedRight === rightIdx) {",
					"                aligned.push(createAlignedPair(leftLine, rightLine, 'match'));",
					"                leftIdx++; rightIdx++;",
					"            } else if (leftLine.arrayPath && !mappedRight) {",
					"                aligned.push(createAlignedPair(leftLine, createEmptyLine(leftLine), 'only_boomi'));",
					"                leftIdx++;",
					"            } else if (rightLine.arrayPath && !mappedLeft) {",
					"                aligned.push(createAlignedPair(createEmptyLine(rightLine), rightLine, 'only_mule'));",
					"                rightIdx++;",
					"            } else {",
					"                const status = determineAlignmentStatus(leftLine, rightLine);",
					"",
					"                if (status) {",
					"                    aligned.push(createAlignedPair(leftLine, rightLine, status));",
					"                    leftIdx++; rightIdx++;",
					"                } else {",
					"                    const rightHasPath = lookAhead(rightLines, rightIdx, leftLine.path, leftLine.type);",
					"                    const leftHasPath = lookAhead(leftLines, leftIdx, rightLine.path, rightLine.type);",
					"",
					"                    if (!rightHasPath) {",
					"                        aligned.push(createAlignedPair(leftLine, createEmptyLine(leftLine), 'only_boomi'));",
					"                        leftIdx++;",
					"                    } else if (!leftHasPath) {",
					"                        aligned.push(createAlignedPair(createEmptyLine(rightLine), rightLine, 'only_mule'));",
					"                        rightIdx++;",
					"                    } else {",
					"                        if (leftLine.path < rightLine.path) {",
					"                            aligned.push(createAlignedPair(leftLine, createEmptyLine(leftLine), 'only_boomi'));",
					"                            leftIdx++;",
					"                        } else {",
					"                            aligned.push(createAlignedPair(createEmptyLine(rightLine), rightLine, 'only_mule'));",
					"                            rightIdx++;",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"    return aligned;",
					"};",
					"",
					"const alignLines = (lines) => {",
					"    const arrayAlignment = alignPrimitiveArrays(lines.boomiLines, lines.muleLines);",
					"    return alignLinesWithArrays(lines.boomiLines, lines.muleLines, arrayAlignment);",
					"};",
					"",
					"// ========================================================================",
					"// Statistics Calculation (Updated)",
					"// ========================================================================",
					"const initializeStats = () => ({",
					"    totalMismatches: 0,",
					"    totalExempted: 0,",
					"    totalMatched: 0,",
					"    totalOnlyMule: 0,",
					"    exemptedFieldsFound: []",
					"});",
					"",
					"const checkExemption = (path, exemptedFields) => {",
					"    for (const field of exemptedFields) {",
					"        const result = isFieldExempted(path, field);",
					"        if (result.isExempted) {",
					"            return { isExempted: true, matchedField: result.matchedField };",
					"        }",
					"    }",
					"    return { isExempted: false, matchedField: null };",
					"};",
					"",
					"const updateStats = (stats, status, isExempted, matchedField) => {",
					"    if (isExempted) {",
					"        stats.totalExempted++;",
					"        // Log the actual field path, not the pattern",
					"        if (!stats.exemptedFieldsFound.includes(matchedField)) {",
					"            stats.exemptedFieldsFound.push(matchedField);",
					"        }",
					"    } else {",
					"        switch (status) {",
					"            case 'match':",
					"                stats.totalMatched++;",
					"                break;",
					"            case 'mismatch':",
					"            case 'only_boomi':",
					"                stats.totalMismatches++;",
					"                break;",
					"            case 'only_mule':",
					"                stats.totalOnlyMule++;",
					"                break;",
					"        }",
					"    }",
					"};",
					"",
					"const calculateStats = (aligned, exemptedFields) => {",
					"    const stats = initializeStats();",
					"    ",
					"    aligned.forEach(pair => {",
					"        const path = pair.boomi.path || pair.mule.path;",
					"        const { isExempted, matchedField } = checkExemption(path, exemptedFields);",
					"        ",
					"        if (isExempted) {",
					"            pair.status = 'exempted';",
					"        }",
					"        ",
					"        updateStats(stats, pair.status, isExempted, matchedField);",
					"    });",
					"    ",
					"    const exemptedFieldsList = stats.exemptedFieldsFound.join(', ');",
					"    const totalComparedLines = stats.totalMatched + stats.totalMismatches + stats.totalExempted;",
					"    const matchPercentage = totalComparedLines > 0 ",
					"        ? Math.round((stats.totalMatched / totalComparedLines) * 10000) / 100 ",
					"        : 0;",
					"    const statusText = stats.totalMismatches === 0 ? \"PASSED\" : \"FAILED\";",
					"    ",
					"    return {",
					"        ...stats,",
					"        totalLines: aligned.length,",
					"        exemptedFieldsList,",
					"        matchPercentage,",
					"        statusText",
					"    };",
					"};",
					"",
					"const runTests = (stats, context) => {",
					"    pm.test(\"Boomi API responded\", () =>",
					"        pm.expect(context.boomiStatus).to.be.oneOf([200, 201, 202, 204])",
					"    );",
					"    pm.test(\"MuleSoft API responded\", () =>",
					"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204])",
					"    );",
					"    pm.test(\"Boomi & Mule Status code match\", () =>",
					"        pm.expect(context.boomiStatus).to.equal(pm.response.code)",
					"    );",
					"    pm.test(\"All non-exempted fields match\", () =>",
					"        pm.expect(stats.totalMismatches).to.equal(0)",
					"    );",
					"};",
					"",
					"const logStatistics = (stats) => {",
					"    console.log(\"=== COMPARISON BREAKDOWN ===\");",
					"    console.log(`Exempted fields: ${stats.exemptedFieldsList || \"None\"}`);",
					"    console.log(`Total matched: ${stats.totalMatched}`);",
					"    console.log(`Total mismatches: ${stats.totalMismatches} (includes only_boomi)`);",
					"    console.log(`Total exempted: ${stats.totalExempted}`);",
					"    console.log(`Only in Mule (ignored): ${stats.totalOnlyMule}`);",
					"    console.log(\"=== STATISTICS ===\");",
					"    console.log(`Total aligned lines: ${stats.totalLines}`);",
					"    console.log(`Match percentage: ${stats.matchPercentage}%`);",
					"    console.log(`Overall status: ${stats.statusText}`);",
					"};",
					"",
					"// ========================================================================",
					"// Minify, Report Storage, and Visualizer",
					"// ========================================================================",
					"// ========================================================================",
					"// Report Storage (with special character handling)",
					"// ========================================================================",
					"const minifyResponse = (text) => {",
					"    if (!text) return \"\";",
					"    ",
					"    try {",
					"        const minified = JSON.stringify(JSON.parse(text.trim()));",
					"        return minified.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');",
					"    } catch (e) {",
					"        return text.trim().replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');",
					"    }",
					"};",
					"",
					"const escapeCurlCommand = (curlCommand) => ",
					"    curlCommand.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');",
					"",
					"const createStatsObject = (stats, context) => ({",
					"    totalLines: stats.totalLines,",
					"    matchedLines: stats.totalMatched,",
					"    mismatchedLines: stats.totalMismatches,",
					"    exemptedLines: stats.totalExempted,",
					"    exemptedFields: stats.exemptedFieldsList,",
					"    matchPercentage: stats.matchPercentage,",
					"    status: stats.statusText,",
					"    boomiStatus: context.boomiStatus,",
					"    mulesoftStatus: pm.response.code,",
					"    timestamp: new Date().toISOString()",
					"});",
					"",
					"const createReportEntry = (context, stats) => ({",
					"    serialNumber: parseInt(context.reportIndex),",
					"    requestName: context.requestName,",
					"    curlCommand: escapeCurlCommand(context.curlCommand),",
					"    boomiResponse: context.skipPayloadLogging ",
					"        ? \"[PAYLOAD_SKIPPED]\" ",
					"        : minifyResponse(context.boomiResponseRaw),",
					"    mulesoftResponse: context.skipPayloadLogging ",
					"        ? \"[PAYLOAD_SKIPPED]\" ",
					"        : minifyResponse(context.mulesoftResponseRaw),",
					"    statistics: createStatsObject(stats, context)",
					"});",
					"",
					"const storeReport = (context, stats) => {",
					"    const reportEntry = createReportEntry(context, stats);",
					"    const paddedIndex = context.reportIndex.padStart(3, '0');",
					"    ",
					"    pm.collectionVariables.set(`report_data_${paddedIndex}`, JSON.stringify(reportEntry));",
					"    console.log(`Report stored with cURL length: ${context.curlCommand.length}`);",
					"    ",
					"    pm.collectionVariables.set(\"temp_request_name\", \"\");",
					"    pm.collectionVariables.set(\"temp_request_curl\", \"\");",
					"};",
					"",
					"",
					"const createTableRow = (pair) => {",
					"    const { boomi: bLine, mule: mLine, status } = pair;",
					"",
					"    // Align with Material Design's 8dp grid system for consistent spacing.",
					"    // The base padding is 16px, and each indentation level adds another 16px.",
					"    const basePadding = 16; // Corresponds to --spacing-medium in CSS",
					"    const indentStep = 16;  // Additional space for each level of nesting",
					"",
					"    const bIndent = basePadding + (bLine.indent * indentStep);",
					"    const mIndent = basePadding + (mLine.indent * indentStep);",
					"",
					"    const bText = bLine.isEmpty ? '' : bLine.text;",
					"    const mText = mLine.isEmpty ? '' : mLine.text;",
					"",
					"    // Map status to a visual pointer for quick identification of differences.",
					"    const pointerMap = { 'mismatch': '↔', 'only_boomi': '→', 'only_mule': '←' };",
					"    const pointer = pointerMap[status] || '';",
					"",
					"    // Use a non-breaking space for empty lines to maintain table row height and structure.",
					"    const emptySpan = '<span class=\"empty\">&nbsp;</span>';",
					"    ",
					"    // The class on the <tr> is used by the stylesheet to apply a status-colored left border.",
					"    // This provides a subtle, scannable indicator without overwhelming the user with row colors.",
					"    // A fallback to 'match' is added for pairs without a special status.",
					"    return `<tr class=\"${status || 'match'}\">",
					"        <td style=\"padding-left: ${bIndent}px\">${bText || emptySpan}</td>",
					"        <td class=\"pointer\">${pointer}</td>",
					"        <td style=\"padding-left: ${mIndent}px\">${mText || emptySpan}</td>",
					"    </tr>`;",
					"};",
					"",
					"",
					"const generateVisualizerHTML = (aligned, stats, requestName) => {",
					"    const tableRows = aligned.map(createTableRow).join('');",
					"    const statusColor = stats.totalMismatches > 0 ? 'var(--md-sys-color-error-container)' : 'var(--md-sys-color-primary-container)';",
					"    const statusTextColor = stats.totalMismatches > 0 ? 'var(--md-sys-color-on-error-container)' : 'var(--md-sys-color-on-primary-container)';",
					"",
					"    return `",
					"    <!DOCTYPE html>",
					"    <html lang=\"en\">",
					"    <head>",
					"        <meta charset=\"UTF-8\">",
					"        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
					"        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">",
					"        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>",
					"        <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap\" rel=\"stylesheet\">",
					"        <style>",
					"            :root {",
					"                --md-sys-color-primary: #6750A4;",
					"                --md-sys-color-on-primary: #FFFFFF;",
					"                --md-sys-color-primary-container: #EADDFF;",
					"                --md-sys-color-on-primary-container: #21005D;",
					"                --md-sys-color-surface: #FFFBFE;",
					"                --md-sys-color-surface-variant: #E7E0EC;",
					"                --md-sys-color-on-surface: #1C1B1F;",
					"                --md-sys-color-on-surface-variant: #49454F;",
					"                --md-sys-color-outline: #79747E;",
					"                --md-sys-color-error: #B3261E;",
					"                --md-sys-color-error-container: #F9DEDC;",
					"                --md-sys-color-on-error-container: #410E0B;",
					"",
					"                --status-mismatch: #B3261E;",
					"                --status-exempted: #79747E;",
					"                --status-only-boomi: #6750A4;",
					"                --status-only-mule: #0061A4;",
					"                ",
					"                --border-radius: 16px;",
					"                --spacing-small: 8px;",
					"                --spacing-medium: 16px;",
					"                --spacing-large: 24px;",
					"            }",
					"",
					"            body {",
					"                margin: 0;",
					"                padding: var(--spacing-large);",
					"                box-sizing: border-box;",
					"                font-family: 'Roboto', 'Arial', sans-serif;",
					"                font-size: 14px;",
					"                background-color: #F7F2FA;",
					"                color: var(--md-sys-color-on-surface);",
					"            }",
					"",
					"            .main-container {",
					"                display: flex;",
					"                flex-direction: column;",
					"                gap: var(--spacing-large);",
					"            }",
					"",
					"            .card {",
					"                background-color: var(--md-sys-color-surface);",
					"                border-radius: var(--border-radius);",
					"                padding: var(--spacing-medium);",
					"                box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 1px 2px rgba(0,0,0,0.06);",
					"                overflow: hidden;",
					"            }",
					"            ",
					"            .header-card {",
					"                padding: 0;",
					"            }",
					"",
					"            .header-title {",
					"                padding: var(--spacing-medium);",
					"            }",
					"",
					"            .header-title h2 {",
					"                font-size: 22px;",
					"                font-weight: 500;",
					"                margin: 0;",
					"                color: var(--md-sys-color-on-surface);",
					"            }",
					"            ",
					"            .header-stats-container {",
					"                display: flex;",
					"                justify-content: space-between;",
					"                align-items: center;",
					"                border-top: 1px solid var(--md-sys-color-surface-variant);",
					"                padding: var(--spacing-medium);",
					"                flex-wrap: wrap;",
					"                gap: var(--spacing-medium);",
					"            }",
					"",
					"            .stats-group {",
					"                display: flex;",
					"                gap: var(--spacing-large);",
					"                flex-wrap: wrap;",
					"            }",
					"            ",
					"            .stat-item {",
					"                display: flex;",
					"                flex-direction: column;",
					"            }",
					"",
					"            .stat-item .label {",
					"                font-size: 12px;",
					"                color: var(--md-sys-color-on-surface-variant);",
					"            }",
					"",
					"            .stat-item .value {",
					"                font-size: 18px;",
					"                font-weight: 500;",
					"            }",
					"            ",
					"            .status-badge {",
					"                padding: var(--spacing-small) var(--spacing-medium);",
					"                border-radius: 8px;",
					"                font-weight: 500;",
					"                background-color: ${statusColor};",
					"                color: ${statusTextColor};",
					"            }",
					"",
					"            .legend-card {",
					"                display: flex;",
					"                align-items: center;",
					"                gap: var(--spacing-large);",
					"                font-size: 12px;",
					"                flex-wrap: wrap;",
					"            }",
					"            ",
					"            .legend-title {",
					"                font-weight: 700;",
					"                color: var(--md-sys-color-on-surface-variant);",
					"            }",
					"",
					"            .legend-item {",
					"                display: flex;",
					"                align-items: center;",
					"                gap: var(--spacing-small);",
					"            }",
					"",
					"            .legend-box {",
					"                width: 14px;",
					"                height: 14px;",
					"                border-radius: 4px;",
					"                border: 2px solid;",
					"            }",
					"",
					"            .legend-box.match { border-color: transparent; }",
					"            .legend-box.mismatch { border-color: var(--status-mismatch); }",
					"            .legend-box.exempted { border-color: var(--status-exempted); }",
					"            .legend-box.onlyboomi { border-color: var(--status-only-boomi); }",
					"            .legend-box.onlymule { border-color: var(--status-only-mule); }",
					"",
					"            .table-container {",
					"                max-height: 70vh;",
					"                overflow: auto;",
					"                border: 1px solid var(--md-sys-color-surface-variant);",
					"                border-radius: var(--border-radius);",
					"            }",
					"",
					"            table {",
					"                width: 100%;",
					"                border-collapse: collapse;",
					"                font-size: 12px;",
					"                table-layout: fixed;",
					"            }",
					"",
					"            thead {",
					"                position: sticky;",
					"                top: 0;",
					"                background: var(--md-sys-color-surface);",
					"                z-index: 10;",
					"            }",
					"",
					"            th {",
					"                padding: var(--spacing-medium);",
					"                text-align: left;",
					"                font-weight: 700;",
					"                font-size: 12px;",
					"                color: var(--md-sys-color-on-surface-variant);",
					"                border-bottom: 1px solid var(--md-sys-color-outline);",
					"            }",
					"            ",
					"            th:first-child { width: 47%; }",
					"            th:nth-child(2) { width: 6%; text-align: center; }",
					"            th:last-child { width: 47%; }",
					"",
					"            tbody tr {",
					"                transition: background-color 0.15s ease-in-out;",
					"                border-left: 4px solid transparent;",
					"            }",
					"            ",
					"            tbody tr:hover {",
					"                background-color: var(--md-sys-color-primary-container);",
					"            }",
					"            ",
					"            tbody tr.mismatch { border-left-color: var(--status-mismatch); }",
					"            tbody tr.exempted { border-left-color: var(--status-exempted); }",
					"            tbody tr.onlyboomi { border-left-color: var(--status-only-boomi); }",
					"            tbody tr.onlymule { border-left-color: var(--status-only-mule); }",
					"",
					"            td {",
					"                padding: var(--spacing-small) var(--spacing-medium);",
					"                border-bottom: 1px solid var(--md-sys-color-surface-variant);",
					"                font-family: 'Consolas', 'Monaco', monospace;",
					"                vertical-align: top;",
					"                word-wrap: break-word;",
					"                white-space: pre-wrap;",
					"                line-height: 1.5;",
					"            }",
					"",
					"            td.pointer {",
					"                text-align: center;",
					"                font-family: 'Roboto', sans-serif;",
					"                font-size: 18px;",
					"                vertical-align: middle;",
					"                color: var(--status-mismatch);",
					"            }",
					"",
					"            .empty { color: #BDBDBD; }",
					"",
					"            .signature {",
					"                text-align: right;",
					"                margin-top: var(--spacing-medium);",
					"                font-size: 10px;",
					"                color: var(--md-sys-color-on-surface-variant);",
					"                font-style: italic;",
					"            }",
					"",
					"        </style>",
					"    </head>",
					"    <body>",
					"        <div class=\"main-container\">",
					"            <div class=\"card header-card\">",
					"                <div class=\"header-title\">",
					"                    <h2>Response Comparison: ${requestName}</h2>",
					"                </div>",
					"                <div class=\"header-stats-container\">",
					"                    <div class=\"stats-group\">",
					"                        <div class=\"stat-item\"><span class=\"label\">Lines</span><span class=\"value\">${stats.totalLines}</span></div>",
					"                        <div class=\"stat-item\"><span class=\"label\">Mismatched</span><span class=\"value\">${stats.totalMismatches}</span></div>",
					"                        <div class=\"stat-item\"><span class=\"label\">Exempted</span><span class=\"value\">${stats.totalExempted}</span></div>",
					"                        <div class=\"stat-item\"><span class=\"label\">Match %</span><span class=\"value\">${stats.matchPercentage}%</span></div>",
					"                    </div>",
					"                    <div class=\"status-badge\">${stats.statusText}</div>",
					"                </div>",
					"            </div>",
					"",
					"            <div class=\"card legend-card\">",
					"                <span class=\"legend-title\">Legend:</span>",
					"                <div class=\"legend-item\"><div class=\"legend-box match\"></div><span>Match</span></div>",
					"                <div class=\"legend-item\"><div class=\"legend-box mismatch\"></div><span>Mismatch</span></div>",
					"                <div class=\"legend-item\"><div class=\"legend-box exempted\"></div><span>Exempted</span></div>",
					"                <div class=\"legend-item\"><div class=\"legend-box onlyboomi\"></div><span>Only Boomi</span></div>",
					"                <div class=\"legend-item\"><div class=\"legend-box onlymule\"></div><span>Only Mule</span></div>",
					"            </div>",
					"",
					"            <div class=\"card table-container\">",
					"                <table>",
					"                    <thead>",
					"                        <tr>",
					"                            <th>Boomi JSON</th>",
					"                            <th></th>",
					"                            <th>MuleSoft JSON</th>",
					"                        </tr>",
					"                    </thead>",
					"                    <tbody>",
					"                        ${tableRows}",
					"                    </tbody>",
					"                </table>",
					"            </div>",
					"        </div>",
					"        <div class=\"signature\">S. 2025</div>",
					"    </body>",
					"    </html>",
					"    `;",
					"};",
					"",
					"",
					"const renderVisualizer = (aligned, stats, requestName) => {",
					"    console.log(\"Rendering side-by-side JSON visualizer\");",
					"    const html = generateVisualizerHTML(aligned, stats, requestName);",
					"    pm.visualizer.set(html);",
					"    console.log(\"Visualizer rendered with LCS array alignment\");",
					"};",
					"",
					"// ========================================================================",
					"// Context and Main Workflow: Must be Last for Hoisting",
					"// ========================================================================",
					"const getRegressionMode = () => pm.collectionVariables.get(\"regression_mode\");",
					"",
					"const shouldSkipRequest = (requestName, regressionMode) =>",
					"    requestName.startsWith(\"[\") && regressionMode !== \"true\";",
					"",
					"const logRegression = (regressionMode) => {",
					"    if (regressionMode === \"true\") {",
					"        console.log(\"=== REGRESSION POST-REQUEST: Processing comparison ===\");",
					"    }",
					"};",
					"",
					"const buildComparisonContext = () => ({",
					"    boomiResponseRaw: pm.collectionVariables.get(\"boomi_response\"),",
					"    boomiStatus: pm.collectionVariables.get(\"boomi_status\"),",
					"    mulesoftResponseRaw: pm.response.text(),",
					"    reportIndex: pm.collectionVariables.get(\"current_report_index\"),",
					"    requestName: pm.collectionVariables.get(\"temp_request_name\") || pm.info.requestName,",
					"    curlCommand: pm.collectionVariables.get(\"temp_request_curl\") || \"\",",
					"    skipPayloadLogging: pm.collectionVariables.get(\"skip_payload_logging\") === \"true\",",
					"    exemptedFields: (() => {",
					"        const exemptedFieldsStr = pm.collectionVariables.get(\"exempted_fields\");",
					"        return exemptedFieldsStr ? JSON.parse(exemptedFieldsStr) : [];",
					"    })()",
					"});",
					"",
					"const validateContext = (context) =>",
					"    context.boomiResponseRaw &&",
					"    context.boomiResponseRaw !== \"\" &&",
					"    !context.boomiResponseRaw.startsWith(\"ERROR:\");",
					"",
					"function executeComparison() {",
					"    const context = buildComparisonContext();",
					"",
					"    if (!validateContext(context)) {",
					"        console.error(\"Boomi response invalid\");",
					"        return;",
					"    }",
					"    const parsedData = {",
					"        boomi: parseJSON(context.boomiResponseRaw),",
					"        mule: parseJSON(context.mulesoftResponseRaw)",
					"    };",
					"    const normalizedData = {",
					"        boomiNorm: normalizeValue(parsedData.boomi),",
					"        muleNorm: normalizeValue(parsedData.mule)",
					"    };",
					"    const lines = buildJSONLines(normalizedData);",
					"    const aligned = alignLines(lines);",
					"    const stats = calculateStats(aligned, context.exemptedFields);",
					"",
					"    runTests(stats, context);",
					"    logStatistics(stats);",
					"    storeReport(context, stats);",
					"",
					"    const isCollectionRunner = pm.info.iteration > 0;",
					"    const isIndividualExecution = !isCollectionRunner;",
					"    if (isIndividualExecution) {",
					"        renderVisualizer(aligned, stats, context.requestName);",
					"    }",
					"}",
					"",
					"// ========================================================================",
					"// Top-level script: Poll and run workflow",
					"// ========================================================================",
					"const regressionMode = getRegressionMode();",
					"",
					"if (shouldSkipRequest(pm.info.requestName, regressionMode)) {",
					"    console.log(`Skipping utility request: ${pm.info.requestName}`);",
					"    return;",
					"}",
					"",
					"logRegression(regressionMode);",
					"",
					"const isCollectionRunner = pm.info.iteration > 0;",
					"const isIndividualExecution = !isCollectionRunner;",
					"console.log(`Request: ${pm.info.requestName}, Individual: ${isIndividualExecution}`);",
					"",
					"const POLL_CONFIG = { maxAttempts: 20, interval: 500 };",
					"let attempts = 0;",
					"",
					"const getBoomiResponse = () => pm.collectionVariables.get(\"boomi_response\");",
					"",
					"const isValidResponse = (response) =>",
					"    response && response !== \"\" && response !== \"undefined\" && response !== null;",
					"",
					"const handleTimeout = () => {",
					"    console.error(\"Boomi response timeout\");",
					"    pm.test(\"Boomi response received\", () => {",
					"        pm.expect.fail(\"Timeout waiting for Boomi response\");",
					"    });",
					"    if (isIndividualExecution) {",
					"        pm.visualizer.set(",
					"            `<div style=\"padding:40px;text-align:center;font-family:Arial;background:#fff3cd\">",
					"                <h2>Timeout</h2>",
					"                <p>Boomi response not received</p>",
					"            </div>`",
					"        );",
					"    }",
					"};",
					"",
					"const waitForBoomiResponse = () => {",
					"    attempts++;",
					"    const boomiResponse = getBoomiResponse();",
					"    if (isValidResponse(boomiResponse)) {",
					"        executeComparison();",
					"    } else if (attempts >= POLL_CONFIG.maxAttempts) {",
					"        handleTimeout();",
					"    } else {",
					"        setTimeout(waitForBoomiResponse, POLL_CONFIG.interval);",
					"    }",
					"};",
					"",
					"waitForBoomiResponse();",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mule_base_url",
			"value": ""
		},
		{
			"key": "boomi_base_url",
			"value": ""
		},
		{
			"key": "exempted_fields",
			"value": ""
		},
		{
			"key": "report_request_count",
			"value": ""
		},
		{
			"key": "regression_mode",
			"value": ""
		},
		{
			"key": "current_report_index",
			"value": ""
		},
		{
			"key": "temp_request_name",
			"value": ""
		},
		{
			"key": "temp_request_curl",
			"value": ""
		},
		{
			"key": "boomi_response",
			"value": ""
		},
		{
			"key": "boomi_status",
			"value": ""
		},
		{
			"key": "report_data_001",
			"value": ""
		},
		{
			"key": "report_data_004",
			"value": ""
		},
		{
			"key": "csv_full_report",
			"value": ""
		},
		{
			"key": "csv_summary_report",
			"value": ""
		},
		{
			"key": "report_data_005",
			"value": ""
		},
		{
			"key": "report_data_006",
			"value": ""
		}
	]
}